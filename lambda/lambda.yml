AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  components:
    Type: String
    AllowedValues:
      - one
      - two
      - three
      - four
    Default: four
  environmentName:
    Type: String
    Default: Dev
  userStack:
    Type: String
    Default: CCC-UserStack
  vpcStack:
    Type: String
    Default: CCC-VPCStack-Dev
  ecrStack:
    Type: String
    Default: CCC-ECRStack

Conditions:
  CreateOneComponent: !Equals
      - !Ref components
      - one
  CreateTwoComponents: !Equals
      - !Ref components
      - two
  CreateThreeComponents: !Equals
      - !Ref components
      - three
  CreateFourComponents: !Equals
      - !Ref components
      - four
  
  CreateAlphaComponent: !Or
    - !Condition CreateOneComponent
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents

  CreateBetaComponent: !Or
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents

  CreateGammaComponent: !Or
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents

  CreateDeltaComponent: !Or
    - !Condition CreateFourComponents

Resources:
  LambdaAlpha:
    Type: AWS::Lambda::Function
    Condition: CreateAlphaComponent
    Description: Lambda function alpha
    Properties:
      FunctionName: !Sub lambda-alpha-${environmentName}
      Code: !Sub:
        - "{ecrRepo}:{environment}"
        - ecrRepo: Fn::ImportValue:
            !Sub ${ecrStack}-LambdaBetaImageRepository
        - environment: !Ref environmentName
      PackageType: Image
      Role: !ImportValue ${userStack.LambdaExecutorArn}
    VpcConfig:
      SecurityGroupIds: Fn::ImportValue:
         !Sub ${vpcStack}-DatabaseSecurityGroupId
      SubnetIds: 
        - !Join:
          - ""
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetB
    Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-LambdaAlpha
        Environment: !Ref environmentName

  LambdaBeta:
    Type: AWS::Lambda::Function
    Condition: CreateBetaComponent
    Description: Lambda beta function
    Properties:
      FunctionName: !Sub lambda-beta-${environmentName}
      Code: !Sub:
        - "{ecrRepo}:{environment}"
        - ecrRepo: Fn::ImportValue:
            !Sub ${ecrStack}-LambdaBetaImageRepository
        - environment: !Ref environmentName
      PackageType: Image
      Role: !ImportValue ${userStack.LambdaExecutorArn}
    VpcConfig:
      SecurityGroupIds: Fn::ImportValue:
         !Sub ${vpcStack}-DatabaseSecurityGroupId
      SubnetIds: 
        - !Join:
          - ""
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetB
    Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-LambdaBeta
        Environment: !Ref environmentName

  LambdaGamma:
    Type: AWS::Lambda::Function
    Condition: CreateGammaComponent
    Description: Lambda gamma function
    Properties:
      FunctionName: !Sub lambda-beta-${environmentName}
      Code: !Sub:
        - "{ecrRepo}:{environment}"
        - ecrRepo: Fn::ImportValue:
            !Sub ${ecrStack}-LambdaBetaImageRepository
        - environment: !Ref environmentName
      PackageType: Image
      Role: !ImportValue ${userStack.LambdaExecutorArn}
    VpcConfig:
      SecurityGroupIds: Fn::ImportValue:
         !Sub ${vpcStack}-DatabaseSecurityGroupId
      SubnetIds: 
        - !Join:
          - ""
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetB
    Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-LambdaGamma
        Environment: !Ref environmentName

  LambdaDelta:
    Type: AWS::Lambda::Function
    Condition: CreateDeltaComponent
    Description: Lambda Delta function
    Properties:
      FunctionName: !Sub lambda-delta-${environmentName}
      Code: !Sub:
        - "{ecrRepo}:{environment}"
        - ecrRepo: Fn::ImportValue:
            !Sub ${ecrStack}-LambdaBetaImageRepository
        - environment: !Ref environmentName
      PackageType: Image
      Role: !ImportValue ${userStack.LambdaExecutorArn}
    VpcConfig:
      SecurityGroupIds: Fn::ImportValue:
         !Sub ${vpcStack}-DatabaseSecurityGroupId
      SubnetIds: 
        - !Join:
          - ""
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue:
              !Sub ${vpcStack}-PrivateSubnetB
      - Key: Name
        Value: !Sub ${AWS::StackName}-LambdaDelta
        Environment: !Ref environmentName

  PipelineLambdaPolicy:
    Type: AWS::IAM::Policy
    Description: Policy to allow pipeline to update Lambda functions
    PolicyName: pipeline-lambda-policy
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Sid: UpdateLambdaFunction
          Effect: Allow
          Action: 
            - "lambda:UpdateFunctionCode"
          Resource:
            - !Ref LambdaGamma.Arn
            - !Ref LambdaDelta.Arn
            - !Ref LambdaBeta.Arn
            - !Red LambdaAlpha.Arn
    DependsOn:
      - LambdaGamma
      - LambdaDelta
      - LambdaBeta
      - LambdaAlpha
    Users: 
      - !ImportValue ${userStack.PipelineUser.Arn}
    Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PipelineLambdaPolicy
        Environment: !Ref environmentName

Outputs:
  LambdaAlphaArn:
    Value: !GetAtt LambdaAlpha.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaArn
  LambdaBetaArn:
    Value: !GetAtt LambdaBetaECR.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaArn
  LambdaGamma:
    Value: !GetAtt LambdaGammaECR.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaArn
  LambdaDeltaImageRepositry:
    Value: !GetAtt LambdaDeltaECR.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaArn