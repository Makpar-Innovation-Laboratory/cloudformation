AWSTemplateFormatVersion: "2010-09-09"

Description: "Provisions ECRs to hold images for Lambda functions and attaches policies to pull and push to these ECRs to the PipelineUser from the InnoLab-UserStack."
Parameters:
  applicationName:
    Type: String
    Default: innolab
  userStack:
    Type: String
    Default: InnoLab-UserStack
  
Resources:
  LambdaAlphaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-alpha"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaBetaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda beta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-beta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaBetaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  LambdaGammaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda gamma function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-gamma"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaGammaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaDeltaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Delta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-delta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaDeltaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaEpsilonECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Epsilon function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-epsilon"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEpsilonPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  LambdaEtaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Eta function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-eta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEtaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  LambdaZetaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Zeta function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-zeta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaZetaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  JiraECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Jira Lambda function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-jira"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaJiraPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
          
  PostgresECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Postgres image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-postgres"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

Outputs:
  LambdaAlphaImageRepository:
    Value: !GetAtt LambdaAlphaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaImageRepository
  LambdaBetaImageRepository:
    Value: !GetAtt LambdaBetaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaImageRepository
  LambdaGammaImageRepository:
    Value: !GetAtt LambdaGammaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaImageRepository
  LambdaDeltaImageRepositry:
    Value: !GetAtt LambdaDeltaECR.RepositoryUri
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaImageRepository
  LambdaEpsilonImageRepository:
    Value: !GetAtt LambdaEpsilonECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEpsilonImageRepository
  LambdaEtaImageRepository:
    Value: !GetAtt LambdaEtaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEtaImageRepository
  LambdaZetaImageRepository:
    Value: !GetAtt LambdaZetaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaZetaImageRepository