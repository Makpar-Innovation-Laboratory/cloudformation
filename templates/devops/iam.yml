AWSTemplateFormatVersion: '2010-09-09'

Description: "The first stack of the DevOps stackset; this stack should always be stood up before the rest of the stacks. It creates all the necessary IAM permissions on which the application will build. It contains a dummy account for a Bitbucket pipeline, an execution role for Lambda, services roles for CodeBuild and CodePipeline and other various roles necessary for the application to function. NOTE: This stack contains resources for both a Bitbucket and a CodePipeline CI/CD pipeline. If using the CodePipeline, the ${applicationName}-RepoStack and ${applicationName}-PipelineStack stacks will need stood up in addition to the other stacks."

Parameters:
  pipelineUser:
    Type: String
    Default: innolab-bb-pipeline
    Description: Username for the Bitbucket pipeline account
  applicationName:
    Type: String
    Default: innolab
    Description: Namespace for the application resources
  masterPassword:
    Type: String
    Description: Initial password for IAM users before required password reset.
  BitbucketFlag:
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false

Conditions:
  Bitbucket: !Equals
    - !Ref BitbucketFlag
    - true
  

Resources:

  ## BITBUCKET PIPELINE USER & POLICY
  BitbucketPipelineUser:
    Type: AWS::IAM::User
    Condition: Bitbucket
    Description: User account for Innolab pipeline to perform all the necessary deployment operations
    Properties:
      UserName: !Ref pipelineUser

  BitbucketPipelinePolicy:
    Type: AWS::IAM::Policy
    Condition: Bitbucket
    Properties:
      PolicyName: !Sub pipeline-${applicationName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: UpdateLambdaFunction
            Effect: Allow
            Action: 
              - "lambda:UpdateFunctionCode"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
          - Sid: RepositoryPermissions
            Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:DescribeImages"
              - "ecr:BatchGetImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
              - "ecr:PutImage"
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
          - Sid: piplineCrudOps
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
            Resource: 
                - !Sub "arn:aws:s3:::${applicationName}-frontend*deployment/*"
          - Sid: pipelineReadOp
            Effect: Allow
            Action:
              - "s3:ListBucket"
            Resource: 
              - !Sub "arn:aws:s3:::${applicationName}-frontend*deployment"
          - Sid: cloudfrontInvalidateOp
            Effect: Allow
            Action:
              - "cloudfront:CreateInvalidation"
            Resource:
              - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"
      Users: 
        - !Ref BitbucketPipelineUser

  ## SERVICE ROLES
  # RDS MONITOR
  RDSMonitoringRole:
    Type: AWS::IAM::Role
    Description: Role to allow monitoring of RDS
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      RoleName: !Sub ${applicationName}-rds-monitor

  # ECS ROLE
  ECSExecutorRole:
    Type: AWS::IAM::Role
    Description: Role for ECS Task Management execution
    Properties:
      RoleName: !Sub ${applicationName}-ecs-executor
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:  
              Service: ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
        # TODO: scope to specific resources
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  # ECS TASK TOLE
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${applicationName}-ecs-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${applicationName}-ecs-task-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: !Sub "${applicationName}EcsTaskEcrStatement"
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
              - Sid: !Sub "${applicationName}EcsTaskLogStatement"
                Action: 
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*' # TODO: figure out arns for loggroups and restrict scope here
              - Sid: !Sub "${applicationName}EcsTaskSecretmanagerStatement"
                Action: 
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}-*"
              - Sid: !Sub "${applicationName}EcsTaskEc2Statement"
                Action:
                  - ec2:DescribeTags
                Effect: Allow
                Resource: '*' # TODO: figure out how to scope to ec2 cluster host
              - Sid: !Sub "${applicationName}EcsTaskEcsStatement"
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:UpdateContainerInstancesState
                Effect: Allow
                Resource: '*' # TODO: scope to ecs cluster? or task definition?

  # ECS SCALING ROLE
  ECSScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${applicationName}-ecs-scaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  # CODEDEPLOY EXECUTION ROLE
  CodeDeployRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab CodeDeploy access to other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'
          # TODO: resource scope

  # CODEPIPELINE SERVICE ROLE
  CodePipelineRole:
      Type: AWS::IAM::Role
      Description: Role to allow Innolab Pipeline access to other AWS Services
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: !Sub ${applicationName}-codepipeline-role-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: !Sub "${applicationName}CodepipelineRoleCodecommitStatement"
                  Action:
                    - codecommit:CancelUploadArchive
                    - codecommit:GetBranch
                    - codecommit:GetCommit
                    - codecommit:GetRepository
                    - codecommit:GetUploadArchiveStatus
                    - codecommit:UploadArchive
                  Effect: Allow
                  Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"
                - Sid: !Sub "${applicationName}CodepipelineCloudwatchStatement"
                  Action:
                    - cloudwatch:*
                  Resource: "*" # TODO: restrict scope
                  Effect: Allow
                - Sid: !Sub "${applicationName}CodepipelineRoleS3Statement"
                  Action:
                    - s3:*
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:s3:::${applicationName}-*"
                - Sid: !Sub "${applicationName}CodepipelineRoleLambdaStatement"
                  Action:
                    - lambda:UpdateFunctionCode
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
                - Sid: !Sub "${applicationName}CodepipelineRoleCodebuildStatement"
                  Action:
                    - codebuild:BatchGetBuilds
                    - codebuild:StartBuild
                    - codebuild:BatchGetBuildBatches
                    - codebuild:StartBuildBatch
                  Resource: 
                    - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/${applicationName}*"
                    - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build-batch/${applicationName}*"
                  Effect: Allow
        RoleName: !Sub ${applicationName}-codepipeline-exector
        
  # CODEBUILD SERVICE ROLE
  CodeBuildRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Pipeline's CodeBuild stage to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${applicationName}-codebuild-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: !Sub ${applicationName}CodeBuildLogOps
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${applicationName}-*
              - Sid: !Sub ${applicationName}CloudFrontOps
                Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource: '*'
              - Sid: !Sub ${applicationName}CodeBuildS3Ops
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}-*"
              - Sid: !Sub ${applicationName}CodeBuildTestReportOps
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${applicationName}*"
              - Sid: !Sub ${applicationName}CodeBuildCodeCommitOps
                Action:
                  - codecommit:GitPull
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}*"  
              - Sid: !Sub ${applicationName}CodeBuildSecretsOps
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}-*"
              - Sid: !Sub ${applicationName}CodebuildECROps
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
              - Sid: !Sub ${applicationName}CodebuildECRTokenOps
                Action:
                  - "ecr:GetAuthorizationToken"
                Effect: Allow
                Resource: '*'
              - Sid: !Sub ${applicationName}CodebuildLambdaUpdateOps
                Action:
                  - lambda:UpdateFunctionCode
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
              - Sid: !Sub ${applicationName}CognitoOps
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminCreateUser"
                Resource: 
                  - !Sub  "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_*"
      RoleName: !Sub ${applicationName}-codebuild-exector

  # LAMBDA FUNCTION ROLE
  LambdaExecutorRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      Policies:
        - PolicyName: !Sub "${applicationName}-cognito-token-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CognitoPermissions
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminCreateUser"
                Resource: 
                  - !Sub  "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_*"
        - PolicyName: !Sub "${applicationName}-dynamodb-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoPermissions
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: 
                  - !Sub  "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${applicationName}-*-Dev"
                  - !Sub  "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${applicationName}-*-Staging"
                  - !Sub  "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${applicationName}-*-Prod"
        - PolicyName: !Sub "${applicationName}-codecommit-policy"
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: CodeCommitPermissions
                  Effect: Allow
                  Action: 
                    - codecommit:GetCommit
                    - codecommit:BatchGetCommit
                    - codecommit:GetDifferences
                    - codecommit:GetTree
                    - codecommit:ListRepositories
                  Resource:
                    - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"

      RoleName: !Sub ${applicationName}-lambda-executor
      
  # GATEWAY LOG ROLE
  APILoggerRole:
    Type: AWS::IAM::Role
    Description: Role to allow API Gateway to push logs to CloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      RoleName: !Sub ${applicationName}-apigateway-logger

  # CLOUDWATCH ROLE
  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com            
      Policies:
        - PolicyName: !Sub "${applicationName}-cloudwatch-event-pipeline-execution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}*"
      RoleName: !Sub ${applicationName}-cloudwatch-role

  BasicAccessGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: basic-access-group
      Policies:
        - PolicyName: !Sub "${applicationName}-iam-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: 
                  - iam:GetAccountPasswordPolicy
                  - iam:GetAccountSummary
                Effect: Allow
                Resource: '*'
              - Action: 
                  - iam:ChangePassword
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                  - iam:DeleteSSHPublicKey
                  - iam:ListSSHPublicKeys
                  - iam:GetSSHPublicKey
                  - iam:UpdateSSHPublicKey
                  - iam:UploadSSHPublicKey
                Effect: Allow
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"

  DatabaseAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: database-admin-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
  
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: developer-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
      Policies:
        - PolicyName: !Sub ${applicationName}-repository-env-branch-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: 
                  - "codecommit:GitPush"
                  - "codecommit:DeleteBranch"
                  - "codecommit:PutFile"
                Effect: Deny
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}*"
                Condition:
                  StringEqualsIfExists:
                    codecommit:References:
                      - "refs/heads/Prod"
                      - "refs/heads/Staging"

  IAMTariq:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: !Sub "/${applicationName}/"
      UserName: tislam
    DependsOn:
      - BasicAccessGroup

  IAMGrant:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: !Sub "/${applicationName}/"
      UserName: gmoore
    DependsOn:
      - BasicAccessGroup

  IAMPeter:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Path: !Sub "/${applicationName}/"
      UserName: pcofrancesco
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup

  IAMJustin:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Path: !Sub "/${applicationName}/"
      UserName: jstauffer
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup
      
  IAMThomas:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Path: !Sub "/${applicationName}/"
      UserName: tklock
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup
  
  IAMPhung:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      Path: !Sub "/${applicationName}/"
      UserName: pngo
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup

  IAMAurora:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      Path: !Sub "/${applicationName}/"
      UserName: apariseau
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup

  IAMSelah:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - basic-access-group
        - developer-group
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      Path: !Sub "/${applicationName}/"
      UserName: skonur
    DependsOn:
      - BasicAccessGroup
      - DeveloperGroup

Outputs:
  BitbucketPipelineUserArn:
    Condition: Bitbucket
    Value: !GetAtt BitbucketPipelineUser.Arn
    Description: ARN for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-BitbucketPipelineUserArn
  BitbucketPipelineUserName:
    Condition: Bitbucket
    Value: !Ref pipelineUser
    Description: Username for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-BitbucketPipelineUserName
  LambdaExecutorRoleArn:
    Value: !GetAtt LambdaExecutorRole.Arn
    Description: ARN for Lambda Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorRoleArn
  ECSExecutorRoleArn:
    Value: !GetAtt ECSExecutorRole.Arn
    Description: ARN for ECS Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-ECSExecutorRoleArn
  ECSTaskRoleArn:
    Value: !GetAtt ECSTaskRole.Arn
    Description: ARN for ECS Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskRoleArn
  ECSScalingRoleArn:
    Value: !GetAtt ECSScalingRole.Arn
    Description: ARN for ECS Scaling
    Export:
      Name: !Sub ${AWS::StackName}-ECSScalingRoleArn
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Description: ARN for CodePipeline role
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineRoleArn
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
    Description: ARN for CodeBuild role
    Export:
      Name: !Sub ${AWS::StackName}-CodeBuildRoleArn
  LoggerRoleArn:
    Value: !GetAtt APILoggerRole.Arn
    Description: ARN for API Logger Role
    Export:
      Name: !Sub ${AWS::StackName}-LoggerArn
  RDSMonitorRoleARN:
    Value: !GetAtt RDSMonitoringRole.Arn
    Description: ARN for RDS Monitoring role
    Export:
      Name: !Sub ${AWS::StackName}-RDSMonitorRoleARN
  CloudWatchEventRoleArn:
    Value: !GetAtt CloudWatchEventRole.Arn
    Description: ARN for CloudWatch Event roles
    Export:
      Name: !Sub ${AWS::StackName}-CloudWatchEventRoleArn