AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for the sonar service deployed into ${applicationName}-ClusterStack-${environmentName}. A task definition is created with a cross stack reference to the RepoStack sonar ECR image repository output. All the necessary resources to route traffic and initiate blue green deployments are provisioned, such as a load balancer, target groups, scaling policies. Finally, the service itself is created and a record is added to Route53 pointing to its load balancer.'

Parameters:
  ## CROSS STACK REFERENCES
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Name of the IAM Cross Stack reference
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Name of the Repo Cross Stack reference
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference
  clusterStack:
    Type: String
    Default: Innolab-ClusterStack-Dev
  ## APPLICATION CONFIGURATION
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  hostedZoneId:
    Type: String
    Description: Hosted zone of the domain.
  certificateArn:
    Type: String
    Description: AWS Arn of the domain certificate.
  domain:
    Type: String
    Default: makpar-innovation.net
    Description: Domain for the application cluster
  ## SERVICE CONFIGURATION
  port:
    Type: Number
    Default: 8080 
    Description: Port mapping for sonar service 
  tag:
    Type: String
    Default: Dev-v0.0.0
    Description: Image tag for the front service ECR

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Resources:
  SonarLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/sonar/"

  AutoScalingSonarTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, Fn::ImportValue: !Sub "${clusterStack}-Cluster", !GetAtt SonarService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"

  AutoScalingSonarPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-sonar"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingSonarTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  SonarTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-sonar-target"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  SonarLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-load-balancer-security-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  
  SonarLoadBalancerClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SonarLoadBalancerSecurityGroup

  SonarLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${applicationName}-${environmentName}-sonar-load-balancer"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SonarLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB

  SonarLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref SonarTargetGroup
          Type: forward
      LoadBalancerArn: !Ref SonarLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateArn
    DependsOn:
      - SonarLoadBalancer
  
  SonarTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: SonarLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-sonar-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 4096
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-sonar
          Image: sonarqube:latest
          PortMappings:
            - ContainerPort: !Ref port
          # EnvironmentFiles:
          #   - Type: s3
          #     Value: !Sub
          #       - "${bucketArn}/web.${env}.env"
          #       - bucketArn: 
          #           Fn::ImportValue: !Sub "${repoStack}-EnvironmentBucketARN"
          #         env:
          #           Fn::FindInMap:
          #             - BranchMap
          #             - !Ref environmentName
          #             - branch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SonarLogGroup
              awslogs-stream-prefix: ecs

  SonarService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - SonarLoadBalancerListenerHTTPS
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-sonar
      Cluster: 
        Fn::ImportValue: !Sub ${clusterStack}-Cluster
      TaskDefinition: !Ref SonarTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
          SecurityGroups:
            - Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-sonar
          ContainerPort: !Ref port
          TargetGroupArn: !Ref SonarTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt SonarDiscoveryService.Arn
          Port: !Ref port

  SonarDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery service for the ${applicationName}-${environmentName}-sonar service"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-sonar-discovery
      NamespaceId: 
        Fn::ImportValue: !Sub ${clusterStack}-Namespace

  SonarRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Name: !Sub "${applicationName}-sonar.${domain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt SonarLoadBalancer.DNSName
        HostedZoneId: !GetAtt SonarLoadBalancer.CanonicalHostedZoneID

Outputs:
  SonarTargetGroup:
    Value: !GetAtt SonarTargetGroup.TargetGroupName
    Description: Name of first sonar target group
    Export:
      Name: !Sub ${AWS::StackName}-SonarTargetGroup
  SonarLoadBalancerName:
    Value: !GetAtt SonarLoadBalancer.LoadBalancerName
    Description: Name of sonar load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-SonarLoadBalancerName
  SonarLoadBalancerDNS:
    Value: !GetAtt SonarLoadBalancer.DNSName
    Description: DNS name of sonar load balancer
    Export:
      Name: !Sub ${AWS::StackName}-SonarLoadBalancerDNSName
  SonarLoadBalancerHostedZone:
    Value: !GetAtt SonarLoadBalancer.CanonicalHostedZoneID
    Description: Load Balancer Hosted Zone Id
    Export:
      Name: !Sub ${AWS::StackName}-SonarLoadBalancerHostedZoneID
  SonarServiceName:
    Value: !GetAtt SonarService.Name
    Description: Name of the sonar service
    Export: 
      Name: !Sub ${AWS::StackName}-SonarServiceName
  SonarServiceArn:
    Value: !Ref SonarService
    Description: Arn of the sonar service
    Export: 
      Name: !Sub ${AWS::StackName}-SonarServiceARN
  SonarTaskDefinitionArn:
    Value: !Ref SonarTaskDefinition
    Description: Arn of the sonar task definition
    Export:
      Name: !Sub ${AWS::StackName}-SonarTaskARN
        