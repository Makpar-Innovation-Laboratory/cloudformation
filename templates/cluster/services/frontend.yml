AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for the frontend service deployed into ${applicationName}-ClusterStack-${environmentName}. A task definition is created with a cross stack reference to the RepoStack frontend ECR image repository output. All the necessary resources to route traffic and initiate blue green deployments are provisioned, such as a load balancer, target groups, scaling policies. Finally, the service itself is created and a record is added to Route53 pointing to its load balancer. Note: the backend service needs stood up before the frontend service.'

Parameters:
  ## CROSS STACK REFERENCES
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Name of the IAM Cross Stack reference
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Name of the Repo Cross Stack reference
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference
  clusterStack:
    Type: String
    Default: Innolab-ClusterStack-Dev
  ## APPLICATION CONFIGURATION
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  certificateArn:
    Type: String
    Description: AWS Arn of the domain certificate.
  domain:
    Type: String
    Default: makpar-innovation.net
    Description: Domain for the application cluster
  ## SERVICE CONFIGURATION
  port:
    Type: Number
    Default: 8080 
    Description: Port mapping for frontend service 
  frontendTag:
    Type: String
    Default: Dev-v0.0.0
    Description: Image tag for the front service ECR

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Resources:
  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/frontend/"

  AutoScalingFrontendTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt FrontendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"

  AutoScalingFrontendPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-frontend"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingFrontendTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  FrontendTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target-2"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  FrontendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-load-balancer-security-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  
  FrontendLoadBalancerClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FrontendLoadBalancerSecurityGroup

  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${applicationName}-${environmentName}-load-balancer"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontendLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB

  FrontendLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateArn
    DependsOn:
      - FrontendLoadBalancer
  
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: FrontendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-frontend-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-frontend
          Image: !Sub
            - "${imageUri}:${whichTag}"
            - imageUri:  
                Fn::ImportValue: !Sub "${repoStack}-FrontendImageRepository"
              whichTag: !Ref frontendTag
          PortMappings:
            - ContainerPort: !Ref port
          EnvironmentFiles:
            - Type: s3
              Value: !Sub
                - "${bucketArn}/web.${env}.env"
                - bucketArn: 
                    Fn::ImportValue: !Sub "${repoStack}-EnvironmentBucketARN"
                  env:
                    Fn::FindInMap:
                      - BranchMap
                      - !Ref environmentName
                      - branch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref FrontendLogGroup
              awslogs-stream-prefix: ecs

  FrontendService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - FrontendLoadBalancerListenerHTTPS
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-frontend
      Cluster: 
        Fn::ImportValue: !Sub ${clusterStack}-Cluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
          SecurityGroups:
            - Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-frontend
          ContainerPort: !Ref port
          TargetGroupArn: !Ref FrontendTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt FrontendDiscoveryService.Arn
          Port: !Ref port
      DeploymentController:
        Type: CODE_DEPLOY

  FrontendDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery service for the ${applicationName}-${environmentName}-frontend service"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-frontend-discvoery
      NamespaceId: 
        Fn::ImportValue: !Sub ${cluserStack}-Namespace

  FrontendRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZoneID
      Name: !Sub
        - "${subdomain}${subdomainEnv}.${domainName}"
        - subdomainName: !Ref applicationName
          domainName: !Ref domain
          subdomainEnv: 
            Fn::FindInMap:
              - BranchMap
              - !Ref environmentName
              - subdomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt FrontendLoadBalancer.DNSName
        HostedZoneId: !GetAtt FrontendLoadBalancer.CanonicalHostedZoneID

Outputs:
  FrontendTargetGroup:
    Value: !GetAtt FrontendTargetGroup.TargetGroupName
    Description: Name of first frontend target group
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTargetGroup
  FrontendTargetGroupAlt:
    Value: !GetAtt FrontendTargetGroupAlt.TargetGroupName
    Description: Name of second frontend target group
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTargetGroupAlt
  FrontendLoadBalancerName:
    Value: !GetAtt FrontendLoadBalancer.LoadBalancerName
    Description: Name of frontend load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerName
  FrontendLoadBalancerDNS:
    Value: !GetAtt FrontendLoadBalancer.DNSName
    Description: DNS name of frontend load balancer
    Export:
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerDNSName
  FrontendLoadBalancerHostedZone:
    Value: !GetAtt FrontendLoadBalancer.CanonicalHostedZoneID
    Description: Load Balancer Hosted Zone Id
    Export:
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerHostedZoneID
  FrontendServiceName:
    Value: !GetAtt FrontendService.Name
    Description: Name of the frontend service
    Export: 
      Name: !Sub ${AWS::StackName}-FrontendServiceName
  FrontendServiceArn:
    Value: !Ref FrontendService
    Description: Arn of the frontend service
    Export: 
      Name: !Sub ${AWS::StackName}-FrontendServiceARN
  FrontendTaskDefinitionArn:
    Value: !Ref FrontendTaskDefinition
    Description: Arn of the frontend task definition
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTaskARN
        