AWSTemplateFormatVersion: '2010-09-09'

Description: 'A stack containing a dummy account for pipeline, execution role for Lambda, and other IAM resources needed for the comet-code-challenge'

Parameters:
  pipelineUser:
    Type: String
    Default: ccc-pipeline
  
  userPoolId:
    Type: String

Resources:
  PipelineUser:
    Type: AWS::IAM::User
    Description: User account for CCC pipeline to perform all the necessary deployment operations
    Properties:
      UserName: !Ref pipelineUser

  LambdaExecutor:
    Type: AWS::IAM::Role
    Description: Role to allow CCC Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CognitoTokenPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: TokenPermissions
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                Resource: 
                  - !GetAtt CognitoUserPool.Arn
    DependsOn:
      - CognitoUserPool

  APILogger:
    Type: AWS::IAM::Role
    Description: Role to allow API Gateway to push logs to CloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  AuthDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: "makpar-innovation"
    DependsOn:
      - CognitoUserPool

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: code-challenge-auth-pool
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
  
  PeterC:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "pcofrancesco@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "pcofrancesco@makpar.com"
  
  GrantM:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "gmoore@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "gmoore@makpar.com"
  
  JustinS:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "jstauffer@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "jstauffer@makpar.com"

  ThomasK:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "tklock@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "tklock@makpar.com"
  
  MattP:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "pcofrancesco@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "pcofrancesco@makpar.com"
  
  MattUserPoolUser:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "mpinardi@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "mpinardi@baosystems.com"
  
  PhungUserPoolUser:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "pngo@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "pngo@makpar.com"

  APIClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CCCAPICognitoClient
      ExplicitAuthFlows:
        - "ALLOW_CUSTOM_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_USER_SRP_AUTH"
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"

Outputs:
  PipelineUserArn:
    Value: !GetAtt PipelineUser.Arn
    Description: ARN for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserArn
  PipelineUserName:
    Value: !Ref pipelineUser
    Description: Username for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserName
  LambdaExecutorArn:
    Value: !GetAtt LambdaExecutor.Arn
    Description: ARN for Lambda Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorArn
  LoggerRoleArn:
    Value: !GetAtt APILogger.Arn
    Description: ARN for API Logger Role
    Export:
      Name: !Sub ${AWS::StackName}-LoggerArn
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Description: User Pool ARN for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolArn
  CognitoUserPoolID:
    Value: !Ref CognitoUserPool
    Description: User Pool ID for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolID
  CognitoClientID:
    Value: !Ref APIClient
    Description: Client ID for API Client
    Export:
      Name: !Sub ${AWS::StackName}-APIClientID