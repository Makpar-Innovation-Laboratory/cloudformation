AWSTemplateFormatVersion: '2010-09-09'

Description: "The first stack of applicationName. This stack should always be stood up before the rest of the stacks. It creates all the necessary IAM permissions on which the application will build. It contains a dummy account for a Bitbucket pipeline, an execution role for Lambda, services roles for CodeBuild and CodePipeline and other various roles necessary for the application to function. NOTE: This stack contains resources for both a third party and a CodePipeline CI/CD pipeline. If using the CodePipeline, the applicationName-RepoStack and applicationName-PipelineStack stacks will need stood up in addition to the other stacks."

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: Namespace for the application resources.
  pipelineUser:
    Type: String
    Default: innolab-pipeline
    Description: Username for the external pipeline account
  
Resources:
  ############################################################################### PIPELINE ACCOUNT
  PipelineUser:
    Type: AWS::IAM::User
    Description: User account for Innolab pipeline to perform all the necessary deployment operations
    Properties:
      UserName: !Ref pipelineUser

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${applicationName}-pipeline-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaPermissions
            Effect: Allow
            Action: 
              - "lambda:UpdateFunctionCode"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*"
          - Sid: ECRPermissions
            Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:DescribeImages"
              - "ecr:BatchGetImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
              - "ecr:PutImage"
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
          - Sid: S3ObjectPermissions
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
            Resource: 
                - !Sub "arn:aws:s3:::${applicationName}-*/*"
          - Sid: S3BucketPermissions
            Effect: Allow
            Action:
              - "s3:ListBucket"
            Resource: 
              - !Sub "arn:aws:s3:::${applicationName}-*"
          - Sid: CloudFormationPermissions
            Effect: Allow
            Action:
              - "cloudformation:*"
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset-target"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:type"
          - Sid: ReadPermissions
            Effect: Allow
            Action:
              - "ec2:Describe*"
              - "ec2:List*"
            Resource: 
      Users: 
        - !Ref PipelineUser

  ############################################################################### SERVICE ROLES

  RDSMonitoringRole:
    Type: AWS::IAM::Role
    Description: Role to allow monitoring of RDS
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      RoleName: !Sub ${applicationName}-rds-monitor
  
  MigrationMonitoringRole:
    Type: AWS::IAM::Role
    Description: Role to allow monitoring of RDS
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "dms.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole
      RoleName: !Sub ${applicationName}-dms-monitor

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${applicationName}-ecs-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: 
            - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Sub ${applicationName}-ecs-baseline-permissions
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSBackendTaskRole:
    Type: AWS::IAM::Role
    Description: Role for the Backend ECS Task execution
    Properties:
      RoleName: !Sub ${applicationName}-ecs-backend-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:  
              Service: ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies: TODO!

  ECSFrontendTaskRole:
    Type: AWS::IAM::Role
    Description: Role for the Frontend ECS Task execution
    Properties:
      RoleName: !Sub ${applicationName}-ecs-frontend-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:  
              Service: ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      # Policies: TODO!
  
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${applicationName}-ecs-task-execution-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${applicationName}-ecs-task-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRAuthPermissions
                Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: '*'
              - Sid: ECRPermissions
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
              - Sid: LogPermissions
                Action: 
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*' # TODO: figure out arns for loggroups and restrict scope here
              - Sid: SecretManagerPermissions
                Action: 
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}-*"
              - Sid: S3FilePermissions
                Action: 
                  - s3:GetObject
                Effect: Allow
                Resource: !Sub "arn:aws:s3:::${applicationName}-env/*.env"
              - Sid: S3BucketPermissions
                Action:
                  - s3:GetBucketLocation
                Effect: Allow
                Resource: !Sub "arn:aws:s3:::${applicationName}-env"
                
  ECSScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${applicationName}-ecs-scaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  CodeDeployRole:
    Type: AWS::IAM::Role
    Description: Role to allow CodeDeploy access to other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'
      Policies:
        - PolicyName: !Sub ${applicationName}-codedeploy-artifact-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Permissions
                Action:
                  - s3:*
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}-*"
      RoleName: !Sub ${applicationName}-codedeploy-executor

  CodePipelineRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Pipeline access to other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${applicationName}-codepipeline-baseline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: IAMPermissions
                Action: 
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${applicationName}-*"
              - Sid: CodeCommitPermissions
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Effect: Allow
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"
              - Sid: CloudWatchPermissions
                Action:
                  - cloudwatch:*
                Resource: "*" # TODO: restrict scope
                Effect: Allow
              - Sid: S3Permissions
                Action:
                  - s3:*
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}-*"
              - Sid: LambdaPermissions
                Action:
                  - lambda:UpdateFunctionCode
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
              - Sid: CodeBuildPermissions
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:*/${applicationName}*"
                Effect: Allow
              - Sid: CodeDeployPermissions
                Action:
                  - codedeploy:GetDeployment
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                Resource: 
                  - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${applicationName}-*
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${applicationName}-*/${applicationName}-*"               
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*"
                Effect: Allow
              - Sid: CodeStarPermissions
                Action: 
                  - codestar-connections:CreateConnection
                  - codestar-connections:DeleteConnection
                  - codestar-connections:UseConnection
                  - codestar-connections:GetConnection
                  - codestar-connections:ListConnections
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*"
              - Sid: ECRAuthPermissions
                Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: '*'
              - Sid: ECRPermissions
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
              - Sid: ECSPermissions
                Action:
                  - ecs:RegisterTaskDefinition
                Effect: Allow
                Resource: '*' # TODO: scope this to...cluster? or whereever task definitions are stored? 
      RoleName: !Sub ${applicationName}-codepipeline-executor
        
  CodeBuildRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Pipeline's CodeBuild stage to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${applicationName}-codebuild-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogPermisisons
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${applicationName}-*
              - Sid: CloudFrontPermissions
                Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource: '*'
              - Sid: S3Permissions
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}-*"
              - Sid: CodeBuildPermissions
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${applicationName}*"
              - Sid: CodeCommitPermissions
                Action:
                  - codecommit:GitPull
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}*" 
              - Sid: CodeDeployPermissions
                Action:
                  - codedeploy:Get*
                  - codedeploy:CreateCloudFormationDeployment
                Effect: Allow
                Resource: '*' # TODO: figure out which resources to scope this to... 
              - Sid: CodeStarPermissions
                Action: 
                  - codestar-connections:CreateConnection
                  - codestar-connections:DeleteConnection
                  - codestar-connections:UseConnection
                  - codestar-connections:GetConnection
                  - codestar-connections:ListConnections
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*"
              - Sid: SecretManagerPermissions
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}-*"
              - Sid: ECRAuthPermissions
                Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: '*'
              - Sid: ECRPermissions
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
              - Sid: LambdaPermissions
                Action:
                  - lambda:UpdateFunctionCode
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
              - Sid: CognitoPermissions
                Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminCreateUser
                Resource: 
                  - !Sub  "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_*"
      RoleName: !Sub ${applicationName}-codebuild-executor

  LambdaExecutorRole:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      # TODO: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      Policies:
        - PolicyName: !Sub "${applicationName}-lambda-execution-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SecretManagerPermissions
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}*"
              - Sid: CognitoPermissions
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminCreateUser"
                Resource: 
                  - !Sub  "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_*"
              - Sid: DynamoPermissions
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: 
                  - !Sub  "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${applicationName}-*"
              - Sid: CodeCommitPermissions
                Effect: Allow
                Action: 
                  - codecommit:GetCommit
                  - codecommit:BatchGetCommit
                  - codecommit:GetDifferences
                  - codecommit:GetTree
                  - codecommit:GetFile
                  - codecommit:ListRepositories
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"
              - Sid: ECRPermissions
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"

      RoleName: !Sub ${applicationName}-lambda-executor
  
  LambdaExecutorEC2Role:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub "${applicationName}-cognito-token-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: TokenPermissions
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                Resource: 
                  - !Sub  "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
        - PolicyName: !Sub ${applicationName}-ec2-management-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LambdaStartStopEc2
                Effect: Allow
                Action: 
                  - "ec2:StartInstances"
                  - "ec2:StopInstances"
                Resource:
                  - !Sub  "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${applicationName}"
              - Sid: LambdaStartStopRds
                Effect: Allow
                Action: 
                  - "rds:StartDBInstance"
                  - "rds:StopDBInstance"
                Resource:
                  - !Sub  "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db/${applicationName}*"
              - Sid: DescribeInstances
                Effect: Allow
                Action: 
                  - "rds:DescribeDBInstances"
                  - "ec2:DescribeInstances"
                Resource:
                  - "*"
      RoleName: !Sub ${applicationName}-lambda-executor-instances
 
  APILoggerRole:
    Type: AWS::IAM::Role
    Description: Role to allow API Gateway to push logs to CloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      RoleName: !Sub ${applicationName}-apigateway-executor

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com            
      Policies:
        - PolicyName: !Sub "${applicationName}-cloudwatch-event-pipeline-execution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}*"
      RoleName: !Sub ${applicationName}-cloudwatch-executor

  ############################################################################### GROUPS

  BasicAccessGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: basic-access-group
      Policies:
        - PolicyName: !Sub "${applicationName}-iam-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: 
                  - iam:GetAccountPasswordPolicy
                  - iam:GetAccountSummary
                  - iam:ListVirtualMFADevices
                Effect: Allow
                Resource: '*'
              - Action: 
                  - iam:GetUser
                  - iam:ChangePassword
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:UpdateAccessKey
                  - iam:DeleteSSHPublicKey
                  - iam:ListSSHPublicKeys
                  - iam:GetSSHPublicKey
                  - iam:UpdateSSHPublicKey
                  - iam:UploadSSHPublicKey
                  - iam:DeleteSigningCertificate
                  - iam:ListSigningCertificates
                  - iam:UpdateSigningCertificate
                  - iam:UploadSigningCertificate
                  - iam:DeactivateMFADevice
                  - iam:EnableMFADevice
                  - iam:ListMFADevices
                  - iam:ResyncMFADevice
                Effect: Allow
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
              - Action:
                  - iam:CreateVirtualMFADevice
                  - iam:DeleteVirtualMFADevice
                Effect: Allow
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:mfa/*"
              - NotAction:
                  - iam:CreateVirtualMFADevice
                  - iam:EnableMFADevice
                  - iam:GetUser
                  - iam:ListMFADevices
                  - iam:ListVirtualMFADevices
                  - iam:ResyncMFADevice
                  - sts:GetSessionToken
                Effect: Deny
                Resource: '*'
                Condition:
                  BoolIfExists:
                    aws:MultiFactorAuthPresent: false 

  DatabaseAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: database-admin-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
  
  PowerUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: power-user-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess

  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: developer-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
      Policies:
        - PolicyName: !Sub ${applicationName}-repository-branch-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: 
                  - "codecommit:GitPush"
                  - "codecommit:DeleteBranch"
                  - "codecommit:PutFile"
                Effect: Deny
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}*"
                Condition:
                  StringEqualsIfExists:
                    codecommit:References:
                      - "refs/heads/Prod"
                      - "refs/heads/Staging"
                      - "refs/heads/Dev"
        - PolicyName: !Sub "${applicationName}-data-migration-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "dms:Describe*"
                Effect: Allow
                Resource: '*'
        - PolicyName: !Sub "${applicationName}-secret-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "secretsmanager:*"
                Effect: Allow
                Resource: '*'
              - Action:
                  - "secretsmanager:Put*"
                  - "secretsmanager:Remove*"
                  - "secretsmanager:Rotate*"
                  - "secretsmanager:Update*"
                Effect: Deny
                Resource: '*'

Outputs:
  PipelineUserArn:
    Value: !GetAtt PipelineUser.Arn
    Description: ARN for external Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserArn
  PipelineUserName:
    Value: !Ref pipelineUser
    Description: Username for Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserName
  LambdaExecutorRoleArn:
    Value: !GetAtt LambdaExecutorRole.Arn
    Description: ARN for Lambda Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorRoleArn
  LambdaExecutorEC2RoleArn:
    Value: !GetAtt LambdaExecutorEC2Role.Arn
    Description: ARN for Lambda Execution Role for EC2 Management
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorEC2RoleArn     
  ECSTaskExecutionRoleArn:
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Description: ARN for ECS General Task Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskExecutionRoleArn
  ECSFrontendTaskRoleArn:
    Value: !GetAtt ECSFrontendTaskRole.Arn
    Description: ARN for ECS Frontend TaskExecution Role
    Export:
      Name: !Sub ${AWS::StackName}-ECSFrontendTaskRoleArn
  ECSBackendTaskRoleArn:
    Value: !GetAtt ECSBackendTaskRole.Arn
    Description: ARN for ECS Backend Task Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-ECSBackendTaskRoleArn
  ECSScalingRoleArn:
    Value: !GetAtt ECSScalingRole.Arn
    Description: ARN for ECS Scaling
    Export:
      Name: !Sub ${AWS::StackName}-ECSScalingRoleArn
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Description: ARN for CodePipeline role
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineRoleArn
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
    Description: ARN for CodeBuild role
    Export:
      Name: !Sub ${AWS::StackName}-CodeBuildRoleArn
  CodeDeployRoleArn:
    Value: !GetAtt CodeDeployRole.Arn
    Description: ARN for CodeDeploy role
    Export:
      Name: !Sub ${AWS::StackName}-CodeDeployRoleArn
  LoggerRoleArn:
    Value: !GetAtt APILoggerRole.Arn
    Description: ARN for API Logger Role
    Export:
      Name: !Sub ${AWS::StackName}-LoggerArn
  RDSMonitorRoleARN:
    Value: !GetAtt RDSMonitoringRole.Arn
    Description: ARN for RDS Monitoring role
    Export:
      Name: !Sub ${AWS::StackName}-RDSMonitorRoleARN
  CloudWatchEventRoleArn:
    Value: !GetAtt CloudWatchEventRole.Arn
    Description: ARN for CloudWatch Event roles
    Export:
      Name: !Sub ${AWS::StackName}-CloudWatchEventRoleArn