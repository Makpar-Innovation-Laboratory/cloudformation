AWSTemplateFormatVersion: "2010-09-09"

Description: 'Conditionally provisions a series of Lambda functions, gives them an execution role for the VPC from CCC-VPCStack-${environmentName} and attaches policies to update the function code to the pipeline user from the CCC-UserStack. The execution images for the Lambdas are pulled from the repositores in CCC-ECRStack.'

Parameters:
  # Stack Parameters
  components:
    Type: String
    AllowedValues:
      - one
      - two
      - three
      - four
      - five 
    Default: five
  environmentName:
    Type: String
    Default: Dev
  # Stack Dependencies
  userStack:
    Type: String
    Default: CCC-UserStack
  ecrStack:
    Type: String
    Default: CCC-ECRStack
  vpcStack:
    Type: String
    Default: CCC-VPCStack-Dev

Conditions:
  CreateOneComponent: !Equals
      - !Ref components
      - one
  CreateTwoComponents: !Equals
      - !Ref components
      - two
  CreateThreeComponents: !Equals
      - !Ref components
      - three
  CreateFourComponents: !Equals
      - !Ref components
      - four
  CreateFiveComponents: !Equals
      - !Ref components
      - five
  
  CreateAlphaComponent: !Or
    - !Condition CreateOneComponent
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateBetaComponent: !Or
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateGammaComponent: !Or
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateDeltaComponent: !Or
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateEpsilonComponent: !Condition CreateFiveComponents

Resources:
  LambdaAlpha: # GET
    Type: AWS::Lambda::Function
    Condition: CreateAlphaComponent
    Description: Lambda function alpha
    Properties:
      FunctionName: !Sub lambda-alpha-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaAlphaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${userStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          POSTGRES_HOST: !Sub "{{resolve:secretsmanager:${environmentName}-dbHost:SecretString}}"
          POSTGRES_USER: !Sub "{{resolve:secretsmanager:${environmentName}-dbUsername:SecretString}}"
          POSTGRES_PASSWORD: !Sub "{{resolve:secretsmanager:${environmentName}-dbPassword:SecretString}}"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaAlpha

  LambdaBeta: # PUT
    Type: AWS::Lambda::Function
    Condition: CreateBetaComponent
    Description: Lambda beta function
    Properties:
      FunctionName: !Sub lambda-beta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaBetaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${userStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          POSTGRES_HOST: !Sub "{{resolve:secretsmanager:${environmentName}-dbHost:SecretString}}"
          POSTGRES_USER: !Sub "{{resolve:secretsmanager:${environmentName}-dbUsername:SecretString}}"
          POSTGRES_PASSWORD: !Sub "{{resolve:secretsmanager:${environmentName}-dbPassword:SecretString}}"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaBeta

  LambdaGamma: # Trigger
    Type: AWS::Lambda::Function
    Condition: CreateGammaComponent
    Description: Lambda gamma function
    Properties:
      FunctionName: !Sub lambda-gamma-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaGammaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${userStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          POSTGRES_HOST: !Sub "{{resolve:secretsmanager:${environmentName}-dbHost:SecretString}}"
          POSTGRES_USER: !Sub "{{resolve:secretsmanager:${environmentName}-dbUsername:SecretString}}"
          POSTGRES_PASSWORD: !Sub "{{resolve:secretsmanager:${environmentName}-dbPassword:SecretString}}"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaGamma

  LambdaDelta: # Trigger
    Type: AWS::Lambda::Function
    Condition: CreateDeltaComponent
    Description: Lambda Delta function
    Properties:
      FunctionName: !Sub lambda-delta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaDeltaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${userStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          POSTGRES_HOST: !Sub "{{resolve:secretsmanager:${environmentName}-dbHost:SecretString}}"
          POSTGRES_USER: !Sub "{{resolve:secretsmanager:${environmentName}-dbUsername:SecretString}}"
          POSTGRES_PASSWORD: !Sub "{{resolve:secretsmanager:${environmentName}-dbPassword:SecretString}}"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaDelta

  LambdaEpsilon:
    Type: AWS::Lambda::Function
    Condition: CreateEpsilonComponent
    Description: Lambda Epsilon function
    Properties: 
      FunctionName: !Sub lambda-epsilon-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo:
              Fn::ImportValue: !Sub ${ecrStack}-LambdaEpsilonImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${userStack}-LambdaExecutorArn
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${userStack}-APIClientID
          POOL_ID: 
            Fn::ImportValue: !Sub ${userStack}-UserPoolID
      Tags:
        - Key: Name 
          Value: !Sub ${AWS::StackName}-LambdaEpsilon

  PipelineLambdaPolicy:
    Type: AWS::IAM::Policy
    Description: Policy to allow pipeline to update Lambda functions
    Properties:
      PolicyName: !Sub pipeline-lambda-${environmentName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: UpdateLambdaFunction
            Effect: Allow
            Action: 
              - "lambda:UpdateFunctionCode"
            Resource:
              - !GetAtt LambdaEpsilon.Arn
              - !GetAtt LambdaGamma.Arn
              - !GetAtt LambdaDelta.Arn
              - !GetAtt LambdaBeta.Arn
              - !GetAtt LambdaAlpha.Arn
      Users: 
        - Fn::ImportValue: !Sub ${userStack}-PipelineUserName
    DependsOn:
      - LambdaEpsilon
      - LambdaGamma
      - LambdaDelta
      - LambdaBeta
      - LambdaAlpha

Outputs:
  LambdaAlphaArn:
    Value: !GetAtt LambdaAlpha.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaArn
  LambdaBetaArn:
    Value: !GetAtt LambdaBeta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaArn
  LambdaGammaArn:
    Value: !GetAtt LambdaGamma.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaArn
  LambdaDeltaArn:
    Value: !GetAtt LambdaDelta.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaArn
  LambdaEpsilonArn:
    Value: !GetAtt LambdaEpsilon.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaEpsilonArn