AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Cross-stack reference to stack containing IAM resources
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Cross-stack reference to stack containing VPC resources
  alationKeyName: 
    Type: String
    Default: alation_key
    Description: Name of the EC2 keypair for SSH'ing into Alation EC2 instance.
  environmentName:
    Type: String
    Default: Dev
    Description: Name of the environment into which Alation is being deployed.
  applicationName:
    Type: String
    Default: innolab
    Description: Application tag appended to the resourced being provisioned and deployed
  domainName:
    Type: String
    Default: makpar-innovation.net
    Description: Domain where DNS records for the application are saved.
  hostedZoneId:
    Type: String
    Description: Physical ID of the AWS Hosted Zone where the domain is served.

Description: "A stack of configuration and resources for deploying Alation service into either a private or public subnet in applicationName-VPCStack-Dev VPC."

Resources:
  AlationInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      InstanceProfileName: !Sub ${applicationName}--alation-profile
      Roles: 
        - Fn::ImportValue: !Sub ${iamStack}-AlationRole

  AlationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${applicationName}-alation-security-group
      GroupDescription: Allow internet ingress into Alation
      VpcId: 
        Fn::ImportValue: !Sub ${vpcStack}-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  Alation:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0b0af3577fe5e3532"
      InstanceType: "m4.xlarge"
      KeyName: !Ref alationKeyName
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tenancy: "default"
      ## NOTE: Uncomment below to deploy into Private Subnet.
      ######################################
      # SubnetId: 
      #   Fn::ImportValue: !Sub "${vpcStack}-PrivateSubnetB"
      # SecurityGroupIds: 
      #   - Fn::ImportValue:
      #       !Sub "${vpcStack}-DatabaseSecurityGroup"
      ######################################
      ## NOTE: Uncomment below to deploy into Public Subnet.
      ######################################
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: 
            Fn::ImportValue: !Sub "${vpcStack}-PublicSubnetB"
          AssociatePublicIpAddress: true
          GroupSet: [Fn::ImportValue: !Sub "${vpcStack}-NATSecurityGroup", !Ref AlationSecurityGroup]  
      #######################################
      EbsOptimized: true
      SourceDestCheck: true
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 80
            VolumeType: "gp2"
        - DeviceName: "/dev/sdb"
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 300
            VolumeType: "st1"
        - DeviceName: "/dev/sdd"
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 200
            VolumeType: "gp2"
      IamInstanceProfile: !Ref AlationInstanceProfile
      Tags: 
        - Key: Name
          Value: !Sub ${applicationName}-${environmentName}-alation 
        - Key: "Environment"
          Value: !Ref environmentName
        - Key: "Application"
          Value: !Ref applicationName
        - Key: "AutoStop"
          Value: True
        - Key: "AutoStart"
          Value: True
      HibernationOptions: 
        Configured: false
      CpuOptions: 
        CoreCount: 2
        ThreadsPerCore: 2
      EnclaveOptions: 
        Enabled: false
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          yum install unzip -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          TOKEN=$(aws secretsmanager get-secret-value --region us-east-1 --secret-id innolab-alationToken --query SecretString --output text)
          dnf install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
          dnf install -y https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          cd /home/
          echo "Token $TOKEN"
          curl -kLH "Authorization: Token $TOKEN" https://customerportal.alationdata.com/api/build_artifact/13195/download/ > alation-2022.1-11.2.2.159547.rpm
          rpm -i alation-2022.1-11.2.2.159547.rpm
          mkfs.ext4 -L alation-data /dev/xvdd
          mkfs.ext4 -L alation-backup dev/xvdb
          mkdir -p /data /backup
          echo "LABEL=alation-data /data ext4 defaults,nofail 0 0" >> /etc/fstab
          echo "LABEL=alation-backup /backup ext4 defaults,nofail 0 0" >> /etc/fstab
          mount -a
          mount
          /etc/init.d/alation init /data /backup
          /etc/init.d/alation start
          yum update -y
          
  AlationElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Alation

  AlationRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref hostedZoneId
      RecordSets:
        - Name: !Sub "${applicationName}-alation.${domainName}"
          Type: A
          ResourceRecords: 
            - !Ref AlationElasticIP
          TTL: 900

