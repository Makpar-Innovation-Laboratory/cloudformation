AWSTemplateFormatVersion: "2010-09-09"

Description: "A stack containing the resources to serve associate routes in the AWS DNS record set. This stack should be stood up last, after everything else has been successfully provisioned. The template can conditionally provision the hosted zone and certificate for a domain that has been registered. If template is not told to configure this values, it will need the hosted zone ID and the certificate ID passed in through parameters"

Parameters:
  DNS:
    Type: String
    Description: "If DNS has been configured, you do not need this parameter. If you want to set up the DNS configuration for a domain, pass in `true`."
    AllowedValues:
      - true
      - false
    Default: false

  domain:
    Type: String
    Default: makpar-innovation.com

  subdomain:
    Type: String
    Default: usaspending

  environmentName:
    Type: String
    Default: Dev
    
  certificateId:
    Type: String
    Description: "If the DNS has been configured prior to this template, you must pass in the CertificateId for the associated domain. Otherwise, you do not need this parameter."
    Default: ${AWS::NoValue}

  hostedZoneId:
    Type: String
    Description: "If the DNS has been configured prior to this template, you must pass in the HostedZoneId for the associated domain and record set. Otherwise, you do nto need this paramter."
    Default: ${AWS::NoValue}    

  gatewayStack:
    Type: String
    Default: CCC-GatewayStack-Dev

Conditions:
  DNSExists: !Equals 
    - !Ref DNS
    - false
  
  NotDNSExists: !Not
    - Condition: DNSExists

Mappings:
  SubEnvDomainMap:
    Dev: 
      subdomainEnv:  "-dev"
    Test: 
      subdomainEnv: "-test"
    Staging: 
      subdomainEnv: "-staging"
    Prod: 
      subdomainEnv: ""

Resources:
  HostedZone:
    Description: "Hosted Zone that is provisioned if DNS configuration does not exist."
    Condition: NotDNSExists
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Sub "${domain}"

  Certificate:
    Description: "Certificate that is provisioned if DNS confiuration does not exist."
    Condition: NotDNSExists
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub "${domain}"
      ValidationMethod: DNS

  DNSRestAPIDomainName:
    # NOTE: Condition & The Certificate ARN
    Condition: DNSExists
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${certificateId}"
      DomainName: !Sub 
        - "api-${subdomainName}${subdomainEnv}.${domainName}"
        - subdomainEnv: 
            Fn::FindInMap:
              - SubEnvDomainMap
              - !Ref environmentName
              - subdomainEnv
          subdomainName: !Ref subdomain
          domainName: !Ref domain
      EndpointConfiguration:
        Types:
          - EDGE

  NoDNSRestAPIDomainName:
    # NOTE: Condition & The Certificate ARN
    Condition: NotDNSExists
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}"
      DomainName: !Sub 
        - "api-${subdomainName}${subdomainEnv}.${domainName}"
        - subdomainEnv: 
            Fn::FindInMap:
              - SubEnvDomainMap
              - !Ref environmentName
              - subdomainEnv
          subdomainName: !Ref subdomain
          domainName: !Ref domain
      EndpointConfiguration:
        Types:
          - EDGE

  DNSRestAPIRoute53RecordSetGroup:
    # NOTE: Condition & The HostedZoneId
    Condition: DNSExists
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref hostedZoneId
      RecordSets:
        - Name: !Sub 
            - "api-${subdomainName}${subdomainEnv}.${domainName}"
            - subdomainEnv: 
                Fn::FindInMap:
                  - SubEnvDomainMap
                  - !Ref environmentName
                  - subdomainEnv
              subdomainName: !Ref subdomain
              domainName: !Ref domain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt DNSRestAPIDomainName.DistributionHostedZoneId
            DNSName: !GetAtt DNSRestAPIDomainName.DistributionDomainName
    DependsOn:
      - DNSRestAPIDomainName
      
  NoDNSRestAPIRoute53RecordSetGroup:
    # NOTE: Condition & the HostedZoneId
    Condition: NotDNSExists
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
        - Name: !Sub 
            - "api-${subdomainName}${subdomainEnv}.${domainName}"
            - subdomainEnv: 
                Fn::FindInMap:
                  - SubEnvDomainMap
                  - !Ref environmentName
                  - subdomainEnv
              subdomainName: !Ref subdomain
              domainName: !Ref domain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt NoDNSRestAPIDomainName.DistributionHostedZoneId
            DNSName: !GetAtt NoDNSRestAPIDomainName.DistributionDomainName
    DependsOn:
      - NoDNSRestAPIDomainName

Outputs: 
  DNSRestAPIDomain:
    Condition: DNSExists
    Value: !Ref DNSRestAPIDomainName
    Export:
      Name: !Sub ${AWS::StackName}-RestAPIDomainName
  NoDNSRestAPIDomain:
    Condition: NotDNSExists
    Value: !Ref NoDNSRestAPIDomainName
    Export:
      Name: !Sub ${AWS::StackName}-RestAPIDomainName
  NoDNSCertificateId:
    Condition: NotDNSExists
    Value: !Ref Certificate
    Export:
      Name: !Sub ${AWS::StackName}-CertificateID
  DNSCertificateId:
    Condition: DNSExists
    Value: !Ref certificateId
    Export:
      Name: !Sub ${AWS::StackName}-CertificateID
  NoDNSHostedZoneId:
    Condition: NotDNSExists
    Value: !Ref HostedZone
    Export:
      Name: !Sub ${AWS::StackName}-HostedZoneID
  DNSHostedZoneId:
    Condition: DNSExists
    Value: !Ref hostedZoneId
    Export:
      Name: !Sub ${AWS::StackName}-HostedZoneID