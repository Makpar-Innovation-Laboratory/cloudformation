AWSTemplateFormatVersion: "2010-09-09"

Description: "A stack containing the resources to serve associate routes in the AWS DNS record set. This stack should be stood up last, after everything else has been successfully provisioned. The template can conditionally provision the hosted zone and certificate for a domain that has been registered. If template is not told to configure this values, it will need the hosted zone ID and the certificate ID passed in through parameters"

Parameters:
  DNS:
    Type: String
    Description: "If DNS has been configured, you do not need this parameter. If you want to set up the DNS configuration for a domain, pass in `true`."
    AllowedValues:
      - true
      - false
    Default: false
  domain:
    Type: String
    Default: makpar-innovation.com
  subdomain:
    Type: String
    Default: laboratory
  environmentName:
    Type: String
    Default: Dev
  certificateId:
    Type: String
    Description: "If the DNS has been configured prior to this template, you must pass in the CertificateId for the associated domain. Otherwise, you do not need this parameter."
    Default: ${AWS::NoValue}
  hostedZoneId:
    Type: String
    Description: "If the DNS has been configured prior to this template, you must pass in the HostedZoneId for the associated domain and record set. Otherwise, you do nto need this paramter."
    Default: ${AWS::NoValue}    
  frontendStack:
    Type: String
    Default: InnoLab-FrontendStack-Dev

Conditions:
  DNSExists: !Equals 
    - !Ref DNS
    - true
  
  NotDNSExists: !Not
    - Condition: DNSExists

Mappings:
  SubEnvDomainMap:
    Dev: 
      subdomainEnv:  "-dev"
    Test: 
      subdomainEnv: "-test"
    Staging: 
      subdomainEnv: "-staging"
    Prod: 
      subdomainEnv: ""

Resources:
  HostedZone:
    Description: "Hosted Zone that is provisioned if DNS configuration does not exist."
    Condition: NotDNSExists
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Sub "${domain}"

  Certificate:
    Description: "Certificate that is provisioned if DNS confiuration does not exist."
    Condition: NotDNSExists
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub "*.${domain}"
      ValidationMethod: DNS

  RestAPIDomainName:
    # NOTE: Condition & The Certificate ARN
    Condition: DNSExists
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: 
        !If [DNSExists, !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${certificateId}", !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}"]
      DomainName: !Sub 
        - "api-${subdomainName}${subdomainEnv}.${domainName}"
        - subdomainEnv: 
            Fn::FindInMap:
              - SubEnvDomainMap
              - !Ref environmentName
              - subdomainEnv
          subdomainName: !Ref subdomain
          domainName: !Ref domain
      EndpointConfiguration:
        Types:
          - EDGE

  RestAPIRoute53RecordSetGroup:
    # NOTE: Condition & The HostedZoneId
    Condition: DNSExists
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !If [DNSExists, !Ref hostedZoneId, !Ref HostedZone]
      RecordSets:
        - Name: !Sub 
            - "api-${subdomainName}${subdomainEnv}.${domainName}"
            - subdomainEnv: 
                Fn::FindInMap:
                  - SubEnvDomainMap
                  - !Ref environmentName
                  - subdomainEnv
              subdomainName: !Ref subdomain
              domainName: !Ref domain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt DNSRestAPIDomainName.DistributionHostedZoneId
            DNSName: !GetAtt DNSRestAPIDomainName.DistributionDomainName
    DependsOn:
      - RestAPIDomainName
    
  FrontendRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !If [DNSExists, !Ref hostedZoneId, !Ref HostedZone]
      RecordSets:
        - Name: !Sub
            - "${subdomainName}${subdomainEnv}.${domainName}"
            - subdomainName: !Ref subdomain
              domainName: !Ref domain
              subdomainEnv: 
                Fn::FindInMap:
                  - SubEnvDomainMap
                  - !Ref environmentName
                  - subdomainEnv
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            # Specify Z2FDTNDATAQYW2. This is always the hosted zone ID when you create an
            # alias record that routes traffic to a CloudFront distribution.
            HostedZoneId: Z2FDTNDATAQYW2
    DependsOn:
      - CloudFrontDistribution

Outputs: 
  RestAPIDomain:
    Condition: DNSExists
    Value: !Ref RestAPIDomainName
    Export:
      Name: !Sub ${AWS::StackName}-RestAPIDomainName
  CertificateId:
    Condition: NotDNSExists
    Value: !If [NotDNSExists, !Ref Certificate, !Ref certificateId]
    Export:
      Name: !Sub ${AWS::StackName}-CertificateID
  HostedZoneId:
    Condition: NotDNSExists
    Value: !If [NotDNSExists, !Ref HostedZone, !Ref hostedZoneId]
    Export:
      Name: !Sub ${AWS::StackName}-HostedZoneID