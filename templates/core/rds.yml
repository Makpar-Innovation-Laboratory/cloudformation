AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions a DB instances with credentials resolved from the SecretManager and deploys it into a private subnet in the ${applicationName}-VPCStack-${environmentName}. A policy is created to allow users to connect to the RDS through IAM"

Parameters:
  applicationName:
    Type: String
    Default: innoLab
  environmentName:
    Type: String
    Default: Dev
  type:
    Type: String
    AllowedValues:
      - postgres
      - oracle
  port:
    Type: Number
    Default: 5432
  # Stack Dependencies
  vpcStack:
    Type: String
    Default: InnoLab-VPCStack
  iamStack:
    Type: String
    Default: InnoLab-IAMStack

  ## NOTE: see note below for ``DatabaseConnectPolicy`` resource.
  # iamStack:
    # Type: String
    # Default: InnoLab-IAMStack

Mappings:
  # Engine specific configuration goes here
  ConfigMap:
    postgres: 
      engine:  postgres
      engineVersion: 14.1
      licenseModel: postgresql-license
      iamAuthentication: true
    oracle: 
      engine: oracle-se2
      engineVersion: 12.1.0.2.v26
      licenseModel: license-included
      iamAuthentication: false

Resources:
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 7
      CopyTagsToSnapshot: false
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Sub ${applicationName}-${environmentName}-database
      EnableIAMDatabaseAuthentication: 
        Fn::FindInMap:
          - ConfigMap
          - !Ref type
          - iamAuthentication
      EnablePerformanceInsights: true
      Engine: 
        Fn::FindInMap:
          - ConfigMap
          - !Ref type
          - engine
      EngineVersion:
        Fn::FindInMap:
          - ConfigMap
          - !Ref type
          - engineVersion
      LicenseModel:
        Fn::FindInMap:
          - ConfigMap
          - !Ref type
          - licenseModel
      MasterUsername: !Sub "{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}"
      MonitoringInterval: 60
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp2
      PerformanceInsightsRetentionPeriod: 7
      DeletionProtection: false
      Port: !Ref port
      DBSubnetGroupName: 
        Fn::ImportValue: !Sub ${vpcStack}-DatabaseSubnetGroup
      VPCSecurityGroups: 
        - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
      MaxAllocatedStorage: 1000
      MonitoringRoleArn: 
        Fn::ImportValue: !Sub ${iamStack}-RDSMonitorRoleARN
      Tags: 
        - Key: Environment
          Value: !Ref environmentName
        - Key: Application
          Value: !Ref applicationName
  
  ## NOTE: The following policy should theoretically allow IAM users to which it is attached to access
  #        the RDS through IAM authentication. However, since the RDS is in a private subnet, I am not 
  #        sure this policy will work...
  # DatabaseConnectPolicy:
    # Type: AWS::IAM::Policy
    # Description: Policy to allow users to connect via AWS CLI
    # Properties:
      # PolicyName: !Sub ${applicationName}-${environmentName}-db-connect-policy
      # PolicyDocument:
        # Version: "2012-10-17"
        # Statement:
          # - Sid: RepositoryPermissions
            # Effect: Allow
            # Action:
              # - "rds-db:connect"
            # Resource: 
              # NOTE: db-QJLKM6XPHWPIA2MO6QTDQAGNHQ is a regional variable and does not change unless the region is changed.
              # - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:db-QJLKM6XPHWPIA2MO6QTDQAGNHQ/{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}"
      # Users:
        # - Fn::ImportValue: !Sub "${iamStack}-Ian"
        # - Fn::ImportValue: !Sub "${iamStack}-Grant"
        # - Fn::ImportValue: !Sub "${iamStack}-Thomas"
        # - Fn::ImportValue: !Sub "${iamStack}-Peter"
        # - Fn::ImportValue: !Sub "${iamStack}-Tariq"
    # DependsOn:
      # - PostgresRDS

Outputs:
  RDSEndpoint:
    Value: !GetAtt PostgresRDS.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RDSEndpoint