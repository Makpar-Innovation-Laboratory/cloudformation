AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for an ECS Fargate Cluster'

Parameters:
  certificateArn:
    Type: String
  applicationName:
    Type: String
    Default: innolab
  environmentName:
    Type: String
    Default: Dev
  backendPort:
    Type: Number
    Default: 8000
  frontendPort:
    Type: Number
    Default: 8080  
  iamStack:
    Type: String
    Default: Innolab-IAMStack
  repoStack:
    Type: String
    Default: Innolab-RepoStack
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev

Resources:
  ## CLUSTER RESOURCES
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-container-security-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref frontendPort
          ToPort: !Ref frontendPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref backendPort
          ToPort: !Ref backendPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${applicationName}-${environmentName}-cluster"

  ####################
  ## BACKEND RESOURCES
  ####################

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/backend/"

  AutoScalingBackendTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt BackendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"
  
  AutoScalingBackendPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-backend"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingBackendTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: BackendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-backend-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSExecutorRoleArn"
      TaskRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-backend
          Image: !Sub
            - "${imageUri}:${tag}"
            - imageUri:  
                Fn::ImportValue: !Sub "${repoStack}-BackendImageRepository"
              tag: !Ref environmentName
          PortMappings:
            - ContainerPort: !Ref backendPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref BackendLogGroup
              awslogs-stream-prefix: ecs

  BackendService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTPS
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-backend
      Cluster: !Ref Cluster
      TaskDefinition: !Ref BackendTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-backend
          ContainerPort: !Ref backendPort
          TargetGroupArn: !Ref BackendTargetGroup

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-backend-target"
      Port: !Ref backendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  BackendTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-backend-target-2"
      Port: !Ref backendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  BackendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      VpcId:
        Fn::ImportValue: !Sub ${vpcStack}-VPC

  PrivateLoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the fargate container security group
      GroupId: !Ref BackendLoadBalancerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      SecurityGroups: 
        - !Ref BackendLoadBalancerSecurityGroup

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - BackendLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: !Ref backendPort
      Protocol: HTTP
  #####################
  ## FRONTEND RESOURCES
  #####################

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/frontend/"

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target"
      Port: !Ref frontendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  FrontendTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target-2"
      Port: !Ref frontendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  AutoScalingFrontendTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt FrontendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"

  AutoScalingFrontendPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-frontend"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingFrontendTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: FrontendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-frontend-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSExecutorRoleArn"
      TaskRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-frontend
          Image: !Sub
            - "${imageUri}:${tag}"
            - imageUri:  
                Fn::ImportValue: !Sub "${repoStack}-FrontendImageRepository"
              tag: !Ref environmentName
          PortMappings:
            - ContainerPort: !Ref frontendPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref FrontendLogGroup
              awslogs-stream-prefix: ecs

  FrontendService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTPS
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-frontend
      Cluster: !Ref Cluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-frontend
          ContainerPort: !Ref frontendPort
          TargetGroupArn: !Ref FrontendTargetGroup

  FrontendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-load-balancer-security-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${applicationName}-${environmentName}-load-balancer"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontendLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB

  FrontendListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateArn
    DependsOn:
      - FrontendLoadBalancer
          
Outputs:
  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
    Description: Load Balancer DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNSName
  LoadBalancerHostedZone:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Description: Load Balancer Hosted Zone Id
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerHostedZoneID