AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for an ECS Fargate Cluster that contains a frontend and backend services. All the necessary resources for continuously updating these services through a blue-green deployment are provisioned in this stack, i.e. the security groups, the Application Load Balancers, the target groups, etc. The actual CodeDeploy resource is contained in the ${applicationName}-PipelineStack.'

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  certificateArn:
    Type: String
    Description: AWS Arn of the domain certificate.
  backendPort:
    Type: Number
    Default: 8000
    Description: Port mapping for backend service
  frontendPort:
    Type: Number
    Default: 8080 
    Description: Port mapping for frontend service 
  domain:
    Type: String
    Default: makpar-innovation.net
    Description: Domain for the application cluster
  backendTag:
    Type: String
    Default: Dev-v0.0.0
  frontendTag:
    Type: String
    Default: Dev-v0.0.0
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Name of the IAM Cross Stack reference
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Name of the Repo Cross Stack reference
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Transform:
  - AWS::CodeDeployBlueGreen

Hooks:
  CodeDeployBlueGreenHook:
    Properties: 
      TrafficRoutingConfig:
        Type: TimeBasedCanary
        TimeBasedCanary:
          StepPercentage: 15
          BakeTimeMins: 5
      Applications:
        # - Target:
        #     Type: AWS::ECS::Service
        #     LogicalID: BackendService
        #   ECSAttributes:
        #     TaskDefinitions:
        #       - BackendTaskDefinition
        #       - BackendTaskDefinitionAlt
        #     TrafficRouting:
        #       ProdTrafficRoute:
        #         Type: 'AWS::ElasticLoadBalancingV2::Listener'
        #         LogicalID: BackendLoadBalancer
        #       TargetGroups: 
        #         - BackendTargetGroup
        #         - BackendTargetGroupAlt
        - Target:
            Type: AWS::ECS::Service
            LogicalID: FrontendService
          ECSAttributes:
            TaskDefinitions:
              - FrontendTaskDefinition
              - FrontendTaskDefinitionAlt
            TaskSets:
              - FrontendTaskSet
              - FrontendTaskSetAlt
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: FrontendLoadBalancer
              TargetGroups:
                - FrontendTargetGroup
                - FrontendTargetGroupAlt
    Type: 'AWS::CodeDeploy::BlueGreen'

# TODOS: move security groups into VPCstack and use crossstack reference once this stack is working.
Resources:
  ## CLUSTER RESOURCES
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${applicationName}-${environmentName}-container-sg"
      GroupDescription: "Security group for ECS containers"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref FrontendLoadBalancerSecurityGroup
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref BackendLoadBalancerSecurityGroup
  
  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${applicationName}-${environmentName}-cluster"

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
        Name: !Sub 
          - "${app}-${env}-ecs.net"
          - app: !Ref applicationName
            env: 
              Fn::FindInMap:
                - BranchMap
                - !Ref environmentName
                - branch
        Vpc: 
          Fn::ImportValue: !Sub "${vpcStack}-VPC"
  
  ####################
  ## BACKEND RESOURCES
  ####################

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/backend/"

  AutoScalingBackendTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt BackendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"
  
  AutoScalingBackendPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-backend"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingBackendTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-backend-target"
      Port: !Ref backendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  BackendTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-backend-target-2"
      Port: !Ref backendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  BackendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "!${applicationName}-${environmentName}-backend-alb-sg"
      GroupDescription: Access to the internal load balancer
      VpcId:
        Fn::ImportValue: !Sub ${vpcStack}-VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          Description: Accept all traffic from the frontend load balancer
          SourceSecurityGroupId: !Ref FrontendLoadBalancerSecurityGroup

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      SecurityGroups: 
        - !Ref BackendLoadBalancerSecurityGroup

  BackendLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - BackendLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: !Ref backendPort
      Protocol: HTTP

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: BackendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-backend-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-backend
          Image: !Sub
            - "${imageUri}:${whichTag}"
            - imageUri:  
                Fn::ImportValue: !Sub "${repoStack}-BackendImageRepository"
              whichTag: !Ref backendTag
          PortMappings:
            - ContainerPort: !Ref backendPort
          EnvironmentFiles:
            - Type: s3
              Value: !Sub
                - "${bucketArn}/app.${env}.env"
                - bucketArn: 
                    Fn::ImportValue: !Sub "${repoStack}-EnvironmentBucketARN"
                  env:
                    Fn::FindInMap:
                      - BranchMap
                      - !Ref environmentName
                      - branch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref BackendLogGroup
              awslogs-stream-prefix: ecs

  BackendTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref BackendService
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-backend
          ContainerPort: !Ref backendPort
          TargetGroupArn: !Ref BackendTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt BackendDiscoveryService.Arn
          Port: !Ref backendPort

  BackendPrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref Cluster
      Service: !Ref BackendService
      TaskSetId: !GetAtt BackendTaskSet.Id

  BackendService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - BackendLoadBalancerListener
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-backend
      Cluster: !Ref Cluster
      # TaskDefinition: !Ref BackendTaskDefinition
      # DeploymentConfiguration:
      #   MinimumHealthyPercent: 100
      #   MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      # HealthCheckGracePeriodSeconds: 30
      # LaunchType: FARGATE
      # NetworkConfiguration: 
      #   AwsvpcConfiguration:
      #     # change to DISABLED if you're using private subnets that have access to a NAT gateway
      #     AssignPublicIp: DISABLED
      #     Subnets:
      #       - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
      #       - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      #     SecurityGroups:
      #       - !Ref ContainerSecurityGroup
      # LoadBalancers:
      #   - ContainerName: !Sub ${applicationName}-${environmentName}-backend
      #     ContainerPort: !Ref backendPort
      #     TargetGroupArn: !Ref BackendTargetGroup
      # ServiceRegistries:
      #   - RegistryArn: !GetAtt BackendDiscoveryService.Arn
      #     Port: !Ref backendPort
      DeploymentController:
        Type: CODE_DEPLOY

  BackendDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery service for the ${applicationName}-${environmentName} backend service"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-backend
      NamespaceId: !Ref PrivateNamespace

  #####################
  ## FRONTEND RESOURCES
  #####################

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/frontend/"

  AutoScalingFrontendTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt FrontendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"

  AutoScalingFrontendPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-frontend"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingFrontendTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target"
      Port: !Ref frontendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  FrontendTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-frontend-target-2"
      Port: !Ref frontendPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  FrontendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-load-balancer-security-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  FrontendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${applicationName}-${environmentName}-load-balancer"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref FrontendLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB

  FrontendLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FrontendLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateArn
    DependsOn:
      - FrontendLoadBalancer
  
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: FrontendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-frontend-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-frontend
          Image: !Sub
            - "${imageUri}:${whichTag}"
            - imageUri:  
                Fn::ImportValue: !Sub "${repoStack}-FrontendImageRepository"
              whichTag: !Ref frontendTag
          PortMappings:
            - ContainerPort: !Ref frontendPort
          EnvironmentFiles:
            - Type: s3
              Value: !Sub
                - "${bucketArn}/web.${env}.env"
                - bucketArn: 
                    Fn::ImportValue: !Sub "${repoStack}-EnvironmentBucketARN"
                  env:
                    Fn::FindInMap:
                      - BranchMap
                      - !Ref environmentName
                      - branch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref FrontendLogGroup
              awslogs-stream-prefix: ecs

  FrontendTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref FrontendService
      TaskDefinition: !Ref FrontendTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-frontend
          ContainerPort: !Ref frontendPort
          TargetGroupArn: !Ref FrontendTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt FrontendDiscoveryService.Arn
          Port: !Ref frontendPort

  FrontendPrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref Cluster
      Service: !Ref FrontendService
      TaskSetId: !GetAtt FrontendTaskSet.Id

  FrontendService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - FrontendLoadBalancerListenerHTTPS
      - BackendService
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-frontend
      Cluster: !Ref Cluster
      # TaskDefinition: !Ref FrontendTaskDefinition
      # DeploymentConfiguration:
      #   MinimumHealthyPercent: 100
      #   MaximumPercent: 200
      DesiredCount: 1
      # # This may need to be adjusted if the container takes a while to start up
      # HealthCheckGracePeriodSeconds: 30
      # LaunchType: FARGATE
      # NetworkConfiguration: 
      #   AwsvpcConfiguration:
      #     # change to DISABLED if you're using private subnets that have access to a NAT gateway
      #     AssignPublicIp: ENABLED
      #     Subnets:
      #       - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
      #       - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
      #     SecurityGroups:
      #       - !Ref ContainerSecurityGroup
      # LoadBalancers:
      #   - ContainerName: !Sub ${applicationName}-${environmentName}-frontend
      #     ContainerPort: !Ref frontendPort
      #     TargetGroupArn: !Ref FrontendTargetGroup
      # ServiceRegistries:
      #   - RegistryArn: !GetAtt FrontendDiscoveryService.Arn
      #     Port: !Ref frontendPort
      DeploymentController:
        Type: CODE_DEPLOY

  FrontendDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery service for the ${applicationName}-${environmentName} frontend service"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-frontend
      NamespaceId: !Ref PrivateNamespace

        
Outputs:
  FrontendLoadBalancerName:
    Value: !GetAtt FrontendLoadBalancer.LoadBalancerName
    Description: Name of frontend load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerName
  FrontendLoadBalancerDNS:
    Value: !GetAtt FrontendLoadBalancer.DNSName
    Description: DNS name of frontend load balancer
    Export:
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerDNSName
  FrontendLoadBalancerHostedZone:
    Value: !GetAtt FrontendLoadBalancer.CanonicalHostedZoneID
    Description: Load Balancer Hosted Zone Id
    Export:
      Name: !Sub ${AWS::StackName}-FrontendLoadBalancerHostedZoneID

  BackendLoadBalancerName:
    Value: !GetAtt BackendLoadBalancer.LoadBalancerName
    Description: Name of backend load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-BackendLoadBalancerName

  BackendTargetGroup:
    Value: !GetAtt BackendTargetGroup.TargetGroupName
    Description: Name of first backend target group
    Export:
      Name: !Sub ${AWS::StackName}-BackendTargetGroup
  BackendTargetGroupAlt:
    Value: !GetAtt BackendTargetGroupAlt.TargetGroupName
    Description: Name of second backend target group
    Export:
      Name: !Sub ${AWS::StackName}-BackendTargetGroupAlt

  FrontendTargetGroup:
    Value: !GetAtt FrontendTargetGroup.TargetGroupName
    Description: Name of first frontend target group
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTargetGroup
  FrontendTargetGroupAlt:
    Value: !GetAtt FrontendTargetGroupAlt.TargetGroupName
    Description: Name of second frontend target group
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTargetGroupAlt

  ClusterName:
    Value: !Ref Cluster
    Description: Name of Innovation Lab ECS Cluster
    Export:
      Name: !Sub ${AWS::StackName}-CluserName
  ClusterARN:
    Value: !GetAtt Cluster.Arn
    Description: Arn of the Innovation Lab ECS Cluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterARN

  BackendServiceName:
    Value: !Ref BackendService
    Description: Name of the backend service
    Export:
      Name: !Sub ${AWS::StackName}-BackendServiceName
  BackendTaskDefinitionArn:
    Value: !Ref BackendTaskDefinition
    Description: Arn of the backend task definition
    Export:
      Name: !Sub ${AWS::StackName}-BackendTaskARN
  FrontendServiceName:
    Value: !Ref FrontendService
    Description: Name of the frontend service
    Export: 
      Name: !Sub ${AWS::StackName}-FrontendServiceName
  FrontendTaskDefinitionArn:
    Value: !Ref FrontendTaskDefinition
    Description: Arn of the frontend task definition
    Export:
      Name: !Sub ${AWS::StackName}-FrontendTaskARN