AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions a series of Lambda functions, gives them an execution role for the VPC from ${applicationName}-VPCStack-${environmentName} and attaches policies to update the function code to the pipeline user from the ${applicationName}-IAMStack. The execution images for the Lambdas are pulled from the repositores in ${applicationName}-ECRStack.'

Parameters:
  environmentName:
    Type: String
    Default: Dev
  applicationName:
    Type: String
    Default: innolab
  iamStack:
    Type: String
    Default: Innolab-IAMStack
  ecrStack:
    Type: String
    Default: Innolab-ECRStack
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
  cognitoStack:
    Type: String
    Default: Innolab-CognitoStack

Resources:
  # API Gateway Path Lambda
  LambdaAlpha: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-alpha-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaAlphaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 90

  # API Gateway Path Param Lambda
  LambdaBeta: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-beta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaBetaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 90

  LambdaGamma:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-gamma-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaGammaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      MemorySize: 4000 
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 90

  LambdaDelta:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-delta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${ecrStack}-LambdaDeltaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 90

  # API Gateway Token Lambda
  LambdaEpsilon:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-epsilon-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo:
              Fn::ImportValue: !Sub ${ecrStack}-LambdaEpsilonImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 180

  # API Gateway Register Lamdba
  LambdaEta:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-eta-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo:
              Fn::ImportValue: !Sub ${ecrStack}-LambdaEtaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Environment:
        Variables:
          CLIENT_ID: 
            Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
          POOL_ID:
            Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID
          POSTGRES_DB: !Ref applicationName
          POSTGRES_HOST: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbHost:SecretString}}'
          POSTGRES_USER: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbUsername:SecretString}}'
          POSTGRES_PASSWORD: !Sub '{{resolve:secretsmanager:${applicationName}-${environmentName}-dbPassword:SecretString}}'
      Timeout: 180
  
  # JIRA Integration Lambda
  LambdaZeta: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-jira
      Code:
        ImageUri: !Sub
          - "${ecrUri}:${tag}"
          - ecrUri:
              Fn::ImportValue: !Sub ${ecrStack}-JiraImageRepository
            tag: latest
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorArn
      Environment:
        Variables:
          ATLASSIAN_TOKEN: !Sub '{{resolve:secretsmanager:${applicationName}-atlassianToken:SecretString}}'
      Timeout: 180

Outputs:
  LambdaAlphaArn:
    Value: !GetAtt LambdaAlpha.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaARN
  LambdaBetaArn:
    Value: !GetAtt LambdaBeta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaARN
  LambdaGammaArn:
    Value: !GetAtt LambdaGamma.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaARN
  LambdaDeltaArn:
    Value: !GetAtt LambdaDelta.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaARN
  LambdaEpsilonArn:
    Value: !GetAtt LambdaEpsilon.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaEpsilonARN
  LambdaEtArn:
    Value: !GetAtt LambdaEta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEtaARN
  LambdaZetaArn:
    Value: !GetAtt LambdaZeta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaZetaARN