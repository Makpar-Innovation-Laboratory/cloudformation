AWSTemplateFormatVersion: '2010-09-09'

Description: "The first stack of the ${applicationName} application; this stack should always be stood up before the rest of the stacks. It creates all the necessary IAM and authentication configuration on which the applicaiton will build. This stack does not map to an ${environmentName} environment; it's resources are available stacks. It contains a dummy account for pipeline, execution role for Lambda and the resources necessary for a Cognito based OAuth authentication flow."

Parameters:
  pipelineUser:
    Type: String
    Default: innolab-pipeline
  
  # domain and subdomain are used to register callbacks with UserPoolClients
  domain:
    Type: String
    Default: makpar-innovation.com
  
  subdomain:
    Type: String
    Default: laboratory

  applicationName:
    Type: String
    Default: innolab

  masterPassword:
    Type: String

Resources:

  BitbucketPipelineUser:
    Type: AWS::IAM::User
    Description: User account for Innolab pipeline to perform all the necessary deployment operations
    Properties:
      UserName: !Ref pipelineUser

  BitbucketPipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub pipeline-${applicationName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: UpdateLambdaFunction
            Effect: Allow
            Action: 
              - "lambda:UpdateFunctionCode"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
          - Sid: RepositoryPermissions
            Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:DescribeImages"
              - "ecr:BatchGetImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
              - "ecr:PutImage"
            Resource: 
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"
          - Sid: piplineCrudOps
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
            Resource: 
                - !Sub "arn:aws:s3:::${applicationName}-frontend*deployment/*"
          - Sid: pipelineReadOp
            Effect: Allow
            Action:
              - "s3:ListBucket"
            Resource: 
              - !Sub "arn:aws:s3:::${applicationName}-frontend*deployment"
          - Sid: cloudfrontInvalidateOp
            Effect: Allow
            Action:
              - "cloudfront:CreateInvalidation"
            Resource:
              - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"
      Users: 
        - !Ref BitbucketPipelineUser

  CodePipelineRole:
      Type: AWS::IAM::Role
      Description: Role to allow Innolab Pipeline to access other AWS Services
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: !Sub ${applicationName}-codepipeline-role-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action:
                    - codecommit:CancelUploadArchive
                    - codecommit:GetBranch
                    - codecommit:GetCommit
                    - codecommit:GetRepository
                    - codecommit:GetUploadArchiveStatus
                    - codecommit:UploadArchive
                  Effect: Allow
                  Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"
                - Action:
                    - cloudwatch:*
                  Resource: "*"
                  Effect: Allow
                - Action:
                    - s3:*
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:s3:::${applicationName}-*"
                - Action:
                    - lambda:UpdateFunctionCode
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${applicationName}-*-*"
                - Action:
                    - codebuild:BatchGetBuilds
                    - codebuild:StartBuild
                    - codebuild:BatchGetBuildBatches
                    - codebuild:StartBuildBatch
                  Resource: "*"
                  Effect: Allow
                - Action:
                    - "ecr:GetAuthorizationToken"
                    - "ecr:BatchCheckLayerAvailability"
                    - "ecr:GetDownloadUrlForLayer"
                    - "ecr:GetRepositoryPolicy"
                    - "ecr:DescribeRepositories"
                    - "ecr:ListImages"
                    - "ecr:DescribeImages"
                    - "ecr:BatchGetImage"
                    - "ecr:InitiateLayerUpload"
                    - "ecr:UploadLayerPart"
                    - "ecr:CompleteLayerUpload"
                    - "ecr:PutImage"
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${applicationName}-*"

    CodeBuildRole:
      Type: AWS::IAM::Role
      Description: Role to allow Innolab Pipeline's CodeBuild stage to access other AWS Services
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codebuild.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: !Sub ${applicationName}-codebuild-role-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Effect: Allow
                  Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${applicationName}-*
                - Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketAcl
                    - s3:GetBucketLocation
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:aws:s3:::${applicationName}-*"
                - Action:
                    - codebuild:CreateReportGroup
                    - codebuild:CreateReport
                    - codebuild:UpdateReport
                    - codebuild:BatchPutTestCases
                    - codebuild:BatchPutCodeCoverages
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${applicationName}*"
                - Action:
                    - secretsmanager:GetSecretValue
                  Effect: Allow
                  Resource:
                    - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}-*"

  LambdaExecutor:
    Type: AWS::IAM::Role
    Description: Role to allow Innolab Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CognitoTokenPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: TokenPermissions
                Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                Resource: 
                  - !GetAtt CognitoUserPool.Arn
    DependsOn:
      - CognitoUserPool
 
  APILogger:
    Type: AWS::IAM::Role
    Description: Role to allow API Gateway to push logs to CloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  AuthDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: "ccc-innovation"
    DependsOn:
      - CognitoUserPool

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: name
  
  APIClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${AWS::StackName}-APICognitoClient
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Sub "https://${subdomain}-dev.${domain}"
      ExplicitAuthFlows:
        - "ALLOW_CUSTOM_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_USER_SRP_AUTH"
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
      SupportedIdentityProviders:
        - COGNITO
    DependsOn:
      - CognitoUserPool

  WebClient: 
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${AWS::StackName}-WebCognitoClient
      GenerateSecret: true
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
    DependsOn:
      - CognitoUserPool

  CognitoPeter:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "pcofrancesco@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "pcofrancesco@makpar.com"
        - Name: "name"
          Value: "Peter Confrancesco"
    DependsOn:
      - CognitoUserPool
  IAMPeter:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
      Path: !Sub "/${applicationName}/"
      UserName: pcofrancesco

  CognitoTariq:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "tislam@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "tislam@makpar.com"
        - Name: "name"
          Value: "Tariq Islam"
  IAMTariq:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: !Sub "/${applicationName}/"
      UserName: tislam

  CognitoGrant:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "gmoore@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "gmoore@makpar.com"
        - Name: "name"
          Value: "Grant Moore"
    DependsOn:
        - CognitoUserPool
  IAMGrant:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: !Sub "/${applicationName}/"
      UserName: gmoore

  CognitoThomas:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "tklock@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "tklock@makpar.com"
        - Name: "name"
          Value: "Thomas Klock"
    DependsOn:
      - CognitoUserPool
  IAMThomas:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
      Path: !Sub "/${applicationName}/"
      UserName: tklock
  
  CognitoMatt:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "mpinardi@baosystems.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "mpinardi@baosystems.com"
        - Name: "name"
          Value: "Matt Pinardi"
    DependsOn:
      - CognitoUserPool
  IAMMatt:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
      Path: !Sub "/${applicationName}/"
      UserName: mpinardi
  
  CognitoPhung:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "pngo@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "pngo@makpar.com"
        - Name: "name"
          Value: "Phung Ngo"
    DependsOn:
      - CognitoUserPool
  IAMPhung:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
      Path: !Sub "/${applicationName}/"
      UserName: pngo

  CognitoIan:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "ian.mcnutt@tripointsolutions.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "ian.mcnutt@tripointsolutions.com"
        - Name: "name"
          Value: "Ian McNutt"
    DependsOn:
      - CognitoUserPool
  IAMIan:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref masterPassword
        PasswordResetRequired: True
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Path: !Sub "/${applicationName}/"
      UserName: imcnutt


Outputs:
  BitbucketPipelineUserArn:
    Value: !GetAtt BitbucketPipelineUser.Arn
    Description: ARN for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-BitbucketPipelineUserArn
  BitbucketPipelineUserName:
    Value: !Ref pipelineUser
    Description: Username for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-BitbucketPipelineUserName
  LambdaExecutorArn:
    Value: !GetAtt LambdaExecutor.Arn
    Description: ARN for Lambda Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorArn
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Description: ARN for CodePipeline role
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineRoleArn
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
    Description: ARN for CodeBuild role
    Export:
      Name: !Sub ${AWS::StackName}-CodeBuildRoleArn
  LoggerRoleArn:
    Value: !GetAtt APILogger.Arn
    Description: ARN for API Logger Role
    Export:
      Name: !Sub ${AWS::StackName}-LoggerArn
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Description: User Pool ARN for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolArn
  CognitoUserPoolID:
    Value: !Ref CognitoUserPool
    Description: User Pool ID for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolID
  CognitoClientID:
    Value: !Ref APIClient
    Description: Client ID for API Client
    Export:
      Name: !Sub ${AWS::StackName}-APIClientID