AWSTemplateFormatVersion: '2010-09-09'

Description: 'A stack containing a dummy account for pipeline, execution role for Lambda, and other IAM resources needed for the comet-code-challenge'

Parameters:
  pipelineUser:
    Type: String
    Default: ccc-pipeline

Resources:
  PipelineUser:
    Type: AWS::IAM::User
    Description: User account for CCC pipeline to perform all the necessary deployment operations
    Properties:
      UserName: !Ref pipelineUser

  LambdaExecutor:
    Type: AWS::IAM::Role
    Description: Role to allow CCC Lambdas to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  APILogger:
    Type: AWS::IAM::Role
    Description: Role to allow API Gateway to push logs to CloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # AuthDomain:
    # Type: AWS::Cognito::UserPoolDomain
    # Properties:
      # UserPoolId: !Ref CognitoUserPool
      # Domain: "comet.makpar-innovation.com"
    # DependsOn:
      # - CognitoUserPool

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: code-challenge-auth-pool
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email

  CognitoUserPoolUser:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      Username: "gmoore@makpar.com"
      UserPoolId: !Ref CognitoUserPool
      UserAttributes:
        - Name: "email_verified"
          Value: "true"
        - Name: "email"
          Value: "gmoore@makpar.com"

Outputs:
  PipelineUserArn:
    Value: !GetAtt PipelineUser.Arn
    Description: ARN for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserArn
  PipelineUserName:
    Value: !Ref pipelineUser
    Description: Username for BitBucket Pipeline User
    Export:
      Name: !Sub ${AWS::StackName}-PipelineUserName
  LambdaExecutorArn:
    Value: !GetAtt LambdaExecutor.Arn
    Description: ARN for Lambda Execution Role
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutorArn
  LoggerRoleArn:
    Value: !GetAtt APILogger.Arn
    Description: ARN for API Logger Role
    Export:
      Name: !Sub ${AWS::StackName}-LoggerArn
  CognitoUsers:
    Value: !GetAtt CognitoUserPool.Arn
    Description: User Pool ARN for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPool
  CognitoUserPoolID:
    Value: !Ref CognitoUserPool
    Description: User Pool ID for Cognito
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolID