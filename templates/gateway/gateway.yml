AWSTemplateFormatVersion: "2010-09-09"

Description: "This stack will stand up an API Gateway, deploy it, build resources on top of it and then hook Lambda functions from the ${applicationName}-LambdaStack-${environmentName} into endpoints. In addition, it attaches a Lambda authorizer using the User Pool from the ${applicationName}-UserStack."

Parameters:
  # OPTIONAL, DEFAULTS TO DEV ENVIRONMENT
  environmentName:
    Type: String
    Description: "Defaults to Dev"
    Default: Dev
  userStack:
    Type: String
    Description: "Defaults to InnoLab-UserStack"
    Default: InnoLab-UserStack
  dnsStack:
    Type: String
    Description: "Defaults to InnoLab-DNSStack-Dev"
    Default: InnoLab-DNSStack-Dev
  lambdaStack:
    Type: String
    Description: "Defaults to InnoLab-LambdaStack-Dev"
    Default: InnoLab-LambdaStack-Dev
  # ENDPOINT PATHS, DEFAULTS
  alphaEndpoint:
    Type: String
    Default: alpha
  betaEndpoint:
    Type: String
    Default: beta
  gammaEndpoint:
    Type: String
    Default: mock-data
  deltaEndpoint:
    Type: String
    Default: delta
  epsilonEndpoint:
    Type: String
    Default: token

Resources:
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub InnoLab-RestAPI-${environmentName}

  CloudWatch:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: 
        Fn::ImportValue: !Sub ${userStack}-LoggerArn
  
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${AWS::StackName}-LogGroup
      RetentionInDays: 30

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestAPI
      Description: !Sub "${environmentName} RestAPI deployment"
      StageName: !Ref environmentName
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt CloudWatchLogGroup.Arn
        LoggingLevel: INFO
        MetricsEnabled: True
        MethodSettings:
          - ResourcePath: "/*"
            HttpMethod: "*"
            LoggingLevel: INFO
            MetricsEnabled: True
    DependsOn:
      - CloudWatch
      - CloudWatchLogGroup
      - AlphaRootResourceMethod
      - AlphaParamResourceMethod
      - BetaRootResourceMethod
      - BetaParamResourceMethod
      - DeltaResourceMethod
      - EpsilonResourceMethod

  RestAPIBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: 
        Fn::ImportValue: !Sub "${dnsStack}-RestAPIDomainName"
      RestApiId: !Ref RestAPI
      Stage: !Ref environmentName
    DependsOn:
      - RestAPIDeployment

  ApiGatewayAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      RestApiId: !Ref RestAPI
      Name: !Sub ${AWS::StackName}-Authorizer
      Type: "COGNITO_USER_POOLS"
      IdentitySource: method.request.header.authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub "${userStack}-UserPoolArn"

  AlphaRootResource: 
    Type: 'AWS::ApiGateway::Resource'
    Properties: 
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref alphaEndpoint
    DependsOn:
      - RestAPI

  AlphaParamResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref AlphaRootResource
      PathPart: "{alpha_param}"
    DependsOn:
      - RestAPI
      - AlphaRootResource
  
  BetaRootResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref betaEndpoint
    DependsOn:
      - RestAPI

  BetaParamResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref BetaRootResource
      PathPart: "{beta_param}"
    DependsOn:
      - RestAPI

  DeltaResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref deltaEndpoint
    DependsOn:
      - RestAPI

  EpsilonResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:   
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref epsilonEndpoint
    DependsOn:
      - RestAPI
  
  GammaResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:   
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref gammaEndpoint
    DependsOn:
      - RestAPI

  # Mock Response for root method to return 400 status code
  AlphaRootResourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref AlphaRootResource
      HttpMethod: GET
      Integration:
        IntegrationResponses:
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 400
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - AlphaRootResource

  # Lambda Integration for root method 
  # AlphaRootResourceMethod:
    # Type: 'AWS::ApiGateway::Method'
    # Properties:
      # RestApiId: !Ref RestAPI
      # ResourceId: !Ref AlphaResource
      # HttpMethod: GET
      # AuthorizationType: COGNITO_USER_POOLS
      # AuthorizerId: !Ref ApiGatewayAuthorizer
      # Integration:
        # Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        # IntegrationHttpMethod: POST
        # Uri: !Join
          # - ''
          # - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            # - Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
            # - /invocations
    # DependsOn:
      # - AlphaResource
  
  AlphaRootCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref AlphaRootResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            # method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn: 
      - AlphaRootResource

  AlphaParamResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref AlphaParamResource
      HttpMethod: GET
      RequestParameters:
        "method.request.path.alpha_param": true
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
            - /invocations
    DependsOn:
      - AlphaRootResource
      - AlphaParamResource

  AlphaParamCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref AlphaParamResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            # method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - AlphaParamResource

  # Mock Response for root method to return 400 status code
  BetaRootResourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref BetaRootResource
      HttpMethod: GET
      Integration:
        IntegrationResponses:
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 400
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - BetaRootResource
  
  BetaRootCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref BetaRootResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            # method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn: 
      - BetaRootResource

  BetaParamResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref BetaParamResource
      HttpMethod: GET
      RequestParameters:
        "method.request.path.beta_param": true
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaBetaArn
            - /invocations
    DependsOn:
      - BetaRootResource
      - BetaParamResource

  BetaParamCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref BetaParamResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            # method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - BetaParamResource

  DeltaResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DeltaResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaDeltaArn
            - /invocations
    DependsOn:
      - DeltaResource
  
  DeltaCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DeltaResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - DeltaResource
  
  GammaResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref GammaResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaGammaArn
            - /invocations
    DependsOn:
      - GammaResource
  
  GammaCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref GammaResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - GammaResource

  EpsilonResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref EpsilonResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateways transform all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaEpsilonArn
            - /invocations
    DependsOn:
      - EpsilonResource

  EpsilonCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref RestAPI
      ResourceId: !Ref EpsilonResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - EpsilonResource

  LambdaAlphaParamApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${alphaEndpoint}/*
    DependsOn:
      - RestAPIDeployment

  LambdaAlphaRootApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${alphaEndpoint}
    DependsOn:
      - RestAPIDeployment

  LambdaBetaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::ImportValue: !Sub ${lambdaStack}-LambdaBetaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${betaEndpoint}
    DependsOn:
      - RestAPIDeployment

  LambdaBetaParamApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaBetaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${betaEndpoint}/*
    DependsOn:
      - RestAPIDeployment


  LambdaDeltaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaDeltaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${deltaEndpoint}
    DependsOn:
      - RestAPIDeployment
  
  LamdbaGammaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::ImportValue: !Sub ${lambdaStack}-LambdaGammaArn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${gammaEndpoint}
    DependsOn:
      - RestAPIDeployment

  LamdbaEpsilonApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::ImportValue: !Sub ${lambdaStack}-LambdaEpsilonArn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${epsilonEndpoint}
    DependsOn:
      - RestAPIDeployment
      
Outputs:
  GatewayEndpoint:
    Value: !Sub https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${environmentName}
  RestAPIID: 
    Value: !Ref RestAPI
    Export:
      Name: !Sub ${AWS::StackName}-RestAPIID