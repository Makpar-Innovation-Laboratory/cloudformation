AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  environmentName:
    Type: String
    Default: Dev

  lambdaStack:
    Type: String
    Default: CCC-LambdaStack-Dev

  userStack:
    Type: String
    Default: CCC-UserStack

  alphaEndpoint:
    Type: String
    Default: alpha

  betaEndpoint:
    Type: String
    Default: beta
  
  testEndpoint:
    Type: String
    Default: test

Resources:
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub CCC-RestAPI-${environmentName}

  CloudWatch:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: 
        Fn::ImportValue: !Sub ${userStack}-LoggerArn
  
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${AWS::StackName}-LogGroup
      RetentionInDays: 30

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestAPI
      Description: !Sub "${environmentName} RestAPI deployment"
      StageName: !Ref environmentName
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt CloudWatchLogGroup.Arn
        LoggingLevel: INFO
        MetricsEnabled: True
        MethodSettings:
          - ResourcePath: "/*"
            HttpMethod: "*"
            LoggingLevel: INFO
            MetricsEnabled: True
    DependsOn:
      - RestAPI
      - CloudWatch
      - CloudWatchLogGroup

  APIClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: 
        Fn::ImportValue: !Sub "${userStack}-CognitoUserPoolID"

  ApiGatewayAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      RestApiId: !Ref RestAPI
      Name: !Sub ${AWS::StackName}-Authorizer
      Type: "COGNITO_USER_POOLS"
      IdentitySource: method.request.header.authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub "${userStack}-CognitoUserPool"

  AlphaResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref alphaEndpoint
  
  BetaResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: !Ref betaEndpoint

  TestResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'test'

  # GetResourcePath:
    # Type: 'AWS::ApiGateway::Resource'
    # Properties:
      # RestApiId: !Ref RestAPI
      # Parent:Id: !Ref GetSource
      # PathPart: '{id}'
      
  AlphaResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref AlphaResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
            - /invocations
  
  BetaResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref BetaResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaBetaArn
            - /invocations
  
  TestResourceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref TestResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        # INTEGRATION HTTP METHOD MUST BE POST
        #   NOTE: API Gateway transforms all incoming requests into POSTS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
            - Fn::ImportValue: !Sub ${lambdaStack}-LambdaDeltaArn
            - /invocations

  LambdaAlphaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaAlphaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${alphaEndpoint}
    DependsOn:
      - RestAPI
      - AlphaResource
      - AlphaResourceMethod
      - RestAPIDeployment

  LambdaBetaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::ImportValue: !Sub ${lambdaStack}-LambdaBetaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${betaEndpoint}
    DependsOn:
      - RestAPI
      - BetaResource
      - BetaResourceMethod
      - RestAPIDeployment
  
  LambdaDeltaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
          Fn::ImportValue: !Sub ${lambdaStack}-LambdaDeltaArn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*/${testEndpoint}
    DependsOn:
      - RestAPI
      - TestResource
      - TestResourceMethod
      - RestAPIDeployment

Outputs:
  GatewayEndpoint:
    Value: !Sub https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${environmentName}

          
