#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="lambda-stack"
SCRIPT_DES=$'Stands up the \e[1mLambdaStack\e[0m with the configuration specified in the \e[1menv/.env file'
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/env/.env

# Example Usage:
# >$     lambda-stack --environment <Dev | Prod | Test | Staging> \
#                     --action <create | update | delete>

#      NOTE: `--action` defaults to `create` if not supplied.
#      NOTE: `--environment` defaults to `Dev` if not supplied.
#      NOTE: All argument flags have a short form and a long form, with single dashes and doubled dashes, e.g.
#           all of the following arguments are equivalent,
#               `--environment`, `-environment`, `--e`, `-e`

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
       key="$1"
       case $key in
              --action|-action|--a|-a)
                     ACTION="$2"
                     shift
                     shift 
                     ;;
              --environment|-environment|--env|-env|--e|-e)
                     ENVIRONMENT="$2"
                     shift
                     shift
                     ;;
              --help|-help|--h|-h)
                     help
                     exit 0
                     ;;
              *)
                     log "Input not understood. See \e[3m--help\e[0m for information on using this command."
                     exit 1
                     ;;
       esac
done

if [ -z "$ENVIRONMENT" ]
then
       log "No \e[3m--environment\e[0m specified. Defaulting to \e[1mDev\e[0m"
       ENVIRONMENT="Dev"
fi
if [ -z "$ACTION" ]
then
       log "No \e[3m--action\e[0m specified. Defaulting to \e[1mcreate\e[0m"
       ACTION="create"
fi

cp $PROJECT_DIR/templates/serverless/lambda.yml ./lambda.yml

if [ "$ACTION" == "create" ]
then
       log "Creating \e[1m${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}\e[0m"
       aws cloudformation create-stack \
              --stack-name "${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}" \
              --template-body file://lambda.yml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                            ParameterKey=applicationName,ParameterValue=$APPLICATION \
                            ParameterKey=domainName,ParameterValue=$DOMAIN \
                            ParameterKey=hostedZoneId,ParameterValue=$HOSTED_ZONE_ID \
                            ParameterKey=certificateArn,ParameterValue="arn:aws:acm:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:certificate/$CERTIFICATE_ID" \
                            ParameterKey=iamStack,ParameterValue="${APPLICATION^}-${IAM_STACK}" \
                            ParameterKey=cognitoStack,ParameterValue="${APPLICATION^}-${COGNITO_STACK}-${ENVIRONMENT}" \
                            ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                            ParameterKey=vpcStack,ParameterValue="${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}"

elif [ "$ACTION" == "update" ]
then
       log "Updating \e[1m${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}\e[0m"
       aws cloudformation update-stack \
              --stack-name "${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}" \
              --template-body file://lambda.yml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                            ParameterKey=applicationName,ParameterValue=$APPLICATION \
                            ParameterKey=domainName,ParameterValue=$DOMAIN \
                            ParameterKey=hostedZoneId,ParameterValue=$HOSTED_ZONE_ID \
                            ParameterKey=certificateArn,ParameterValue="arn:aws:acm:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:certificate/$CERTIFICATE_ID" \
                            ParameterKey=iamStack,ParameterValue="${APPLICATION^}-$IAM_STACK" \
                            ParameterKey=cognitoStack,ParameterValue="${APPLICATION^}-${COGNITO_STACK}-${ENVIRONMENT}" \
                            ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                            ParameterKey=vpcStack,ParameterValue="${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}"              
elif [ "$ACTION" == "delete" ]
then 
       log "Deleting \e[1m${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}\e[0m"
       aws cloudformation delete-stack \
              --stack-name "${APPLICATION^}-${LAMBDA_STACK}-${ENVIRONMENT}"
fi

rm ./lambda.yml