#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="dynamo-stack"
SCRIPT_DES=$''
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/env/.env

# Example Usage:
# >$     dynamo-stack --environment <Dev | Prod | Test | Staging> \
#                       --partition-key <required: key name> \
#                       --sort-key <optional: key name> \
#                       --action <create | update | delete>

#      NOTE: `--action` defaults to `create` if not supplied.
#      NOTE: `--environment` defaults to `Dev` if not supplied.
#      NOTE: All argument flags have a short form and a long form, with single dashes and doubled dashes, e.g.
#           all of the following arguments are equivalent,
#               --environment, -environment, --e, -e

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --action|-action|--a|-a)
            ACTION="$2"
            shift
            shift 
            ;;
         --table-name|-table-name|--tb|-tb)
            TABLE="$2"
            shift
            shift 
            ;;
         --partition-key|-partion-key|--pk|-pk)
            PARTITION="$2"
            shift
            shift 
            ;;
        --environment|-environment|--env|-env|--e|-e)
            ENVIRONMENT="$2"
            shift
            shift
            ;;
        --sort-key|-sort-key|--sk|-sk)
            SORT="$2"
            shift
            shift 
            ;;
        --help|-help|--h|-h)
            help
            exit 0
            ;;
        *)
            log "Input not understood. See \e[3m--help\e[0m for information on using this command."
            exit 1
            ;;
    esac
done

if [ -z "$ACTION" ]
then
    log "No \e[3m--action\e[0m specified. Defaulting to \e[1mcreate\e[0m"
    ACTION="create"
fi

if [ -z "$ENVIRONMENT" ]
then
    log "No \e[3m--environment\e[0m specified. Defaulting to \e[1mDev\e[0m"
    ENVIRONMENT="Dev"
fi

cp $PROJECT_DIR/templates/serverless/dynamo.yml ./dynamo.yml

if [ "$ACTION" == "create" ]
then
    log "Creating \e[1m${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}\e[0m"
    if [ ! -z $SORT ]
    then
        aws cloudformation create-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION \
                        ParameterKey=sortKey,ParameterValue=$SORT
    else
        aws cloudformation create-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION
    fi
elif [ "$ACTION" == "update" ]
then
    log "Updating \e[1m${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}\e[0m"
    if [ ! -z $SORT ]
    then
        aws cloudformation update-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION \
                        ParameterKey=sortKey,ParameterValue=$SORT
    else
        aws cloudformation update-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION
    fi
elif [ "$ACTION" == "delete" ]
then
    log "Deleting \e[1m${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}\e[0m"
    aws cloudformation delete-stack \
        --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}"
else
    log "Action not understood"
fi

rm ./dynamo.yml