#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="dynamo-stack"
SCRIPT_DES=$''
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/.env

# Example Usage:
# >$     dynamo-stack --environment <Dev | Prod | Test | Staging> \
#                       --partition-key <required: key name> \
#                       --sort-key <optional: key name> \
#                       --action <create | update | delete>

#   NOTE: ``--action`` defaults to `create` if not supplied

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --action)
            ACTION="$2"
            shift
            shift 
            ;;
         --table-name)
            TABLE="$2"
            shift
            shift 
            ;;
         --partition-key)
            PARTITION="$2"
            shift
            shift 
            ;;
        --sort-key)
            SORT="$2"
            shift
            shift 
            ;;
        --help)
            help
            exit 0
            ;;
        --environment)
            ENVIRONMENT="$2"
            shift
            shift
            ;;
        *)
            log "Input not understood. See \e[3m--help\e[0m for information on using this command."
            exit 1
            ;;
    esac
done

if [ -z "$ACTION" ]
then
    ACTION="create"
fi

cp $PROJECT_DIR/templates/serverless/dynamo.yml ./dynamo.yml

if [ "$ACTION" == "create" ]
then
    if [ ! -z $SORT ]
    then
        aws cloudformation create-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION \
                        ParameterKey=sortKey,ParameterValue=$SORT
    else
        aws cloudformation create-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION
    fi
elif [ "$ACTION" == "update" ]
then
    if [ ! -z $SORT ]
    then
        aws cloudformation update-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION \
                        ParameterKey=sortKey,ParameterValue=$SORT
    else
        aws cloudformation update-stack \
            --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}" \
            --template-body file://dynamo.yml \
            --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=tableName,ParameterValue=$TABLE \
                        ParameterKey=partitionKey,ParameterValue=$PARTITION
    fi
elif [ "$ACTION" == "delete" ]
then
    aws cloudformation delete-stack \
        --stack-name "${APPLICATION^}-${DYNAMO_STACK}-${ENVIRONMENT}"
else
    log "Action not understood"
fi

rm ./dynamo.yml