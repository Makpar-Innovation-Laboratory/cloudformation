#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="pipeline-stack"
SCRIPT_DES=$'Performs the action specified by \e[3m--action\e[0m on the pipeline specified by \e[3m--pipeline\e[0m in the environment specified by \e[3m--environment\e[0m'
PROJECT_DIR="$SCRIPT_DIR/../../.."
source "$PROJECT_DIR/env/.env"

# Example Usage:
# >$     pipeline-stack --environment <Dev | Prod | Test | Staging> \
#                       --pipeline <app | lambda | master | cloudformation>
#                       --action <create | update | delete> 

#      NOTE: `--action` defaults to `create` if not supplied.
#      NOTE: `--environment` defaults to `Dev` if not supplied.
#      NOTE: All argument flags have a short form and a long form, with single dashes and doubled dashes, e.g.
#           all of the following arguments are equivalent,
#               `--environment`, `-environment`, `--e`, `-e`

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --action|-action|--a|-a)
            ACTION="$2"
            shift
            shift 
            ;;
        --environment|-environment|--env|-env|--e|-e)
            ENVIRONMENT="$2"
            shift
            shift
            ;;
        --pipeline|-pipeline|--pipe|-pipe|--p|-p)
            PIPELINE="$2"
            shift
            shift
            ;;
        --help|-help|--h|-h)
            help
            exit 0
            ;;
        *)
            log "Input not understood. See \e[3m--help\e[0m for information on using this command."
            exit 1
            ;;
    esac
done

if [ -z "$PIPELINE" ]
then
    log "No \e[3m--pipeline\e[0m specified. Please re-executed and specify \e[1m<app | lambda | master | cloudformation>\e[0m"
    exit 1
fi
if [ -z "$ENVIRONMENT" ]
then 
    log "No \e[3m--environment\e[0m specified. Defaulting to \e[1mDev\e[0m"
    ENVIRONMENT="Dev"
fi
if [ -z "$ACTION" ]
then
    log "No \e[3m--action\e[0m specified. Defaulting to \e[1mcreate\e[0m"
    ACTION="create"
fi

case $PIPELINE in 
    master)
        cp "$PROJECT_DIR/templates/devops/pipelines/master.yml" ./pipeline.yml
        STACK_NAME="${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}"
        ;;
    cloudformation)
        cp "$PROJECT_DIR/templates/devops/pipelines/cloudformation.yml" ./pipeline.yml
        STACK_NAME="${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}"
        ;;
    lambda)
        cp "$PROJECT_DIR/templates/devops/pipelines/lambda.yml" ./pipeline.yml
        STACK_NAME="${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}-${ENVIRONMENT}"
        ;;
    app)
        cp "$PROJECT_DIR/templates/devops/pipelines/app.yml" ./pipeline.yml
        STACK_NAME="${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}-${ENVIRONMENT}"
        ;;
    *)
        log "\e3[m--pipeline\e[0m input not understood; must be <app | lambda | master>"
        exit 1
        ;;
esac

if [ "$ACTION" == "create" ]
then
    log "Creating \e[1m$STACK_NAME\e[0m"
    aws cloudformation create-stack \
        --stack-name $STACK_NAME \
        --template-body file://pipeline.yml \
        --parameters ParameterKey=applicationName,ParameterValue="$APPLICATION"  \
                     ParameterKey=environmentName,ParameterValue="$ENVIRONMENT" \
                     ParameterKey=domainName,ParameterValue="$DOMAIN" \
                     ParameterKey=iamStack,ParameterValue="${APPLICATION^}-$IAM_STACK" \
                     ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                     ParameterKey=coverageStack,ParameterValue="${APPLICATION^}-${COVERAGE_STACK}" \
                     ParameterKey=cognitoStack,ParameterValue="${APPLICATION^}-${COGNITO_STACK}-${ENVIRONMENT}" \
                     ParameterKey=clusterStack,ParameterValue="${APPLICATION^}-${CLUSTER_STACK}-${ENVIRONMENT}"
    rm ./pipeline.yml
    exit 0
elif [ "$ACTION" == "update" ]
then
    log "Updating \e[1m$STACK_NAME\e[0m"
    aws cloudformation update-stack \
        --stack-name $STACK_NAME \
        --template-body file://pipeline.yml \
        --parameters ParameterKey=applicationName,ParameterValue="$APPLICATION" \
                     ParameterKey=environmentName,ParameterValue="$ENVIRONMENT" \
                     ParameterKey=domainName,ParameterValue="$DOMAIN" \
                     ParameterKey=iamStack,ParameterValue="${APPLICATION^}-$IAM_STACK" \
                     ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                     ParameterKey=coverageStack,ParameterValue="${APPLICATION^}-${COVERAGE_STACK}" \
                     ParameterKey=cognitoStack,ParameterValue="${APPLICATION^}-${COGNITO_STACK}-${ENVIRONMENT}" \
                     ParameterKey=clusterStack,ParameterValue="${APPLICATION^}-${CLUSTER_STACK}-${ENVIRONMENT}"
    rm ./pipeline.yml
    exit 0
elif [ "$ACTION" == "delete" ]
then
    log "Deleting \e[1m${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}-${ENVIRONMENT}\e[0m"
    aws cloudformation delete-stack \
        --stack-name "${APPLICATION^}-${PIPELINE^}-${PIPELINE_STACK}-${ENVIRONMENT}"
    rm ./pipeline.yml
    exit 0
else
    log "Action not understood"
    rm ./pipeline.yml
    exit 1
fi