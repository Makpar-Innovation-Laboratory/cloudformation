#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="service-stack"
SCRIPT_DES=$'Stand up a service in the Fargate cluster'
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/env/.env

# Example Usage:
# >$     service-stack --environment <Dev | Prod | Test | Staging> \
#                       --action <create | update | delete> \
#                       --service <frontend | backend | sonar>
#                       --tag <tag>
#                       --port <port>

#   NOTE: `--action` defaults to `create` if not supplied
#   NOTE: `--tag` defaults to `$ENVIRONMENT-v0.0.0` if not supplied

# EXAMPLES: 
#   ## BACKEND SERVICE
#       service-stack --environment Dev --service backend --port 8000
#   ## FRONTEND SERVICE
#       service-stack --environment Dev --service frontend --port 8080

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --action|-action|--a|-a)
            ACTION="$2"
            shift
            shift 
            ;;
        --environment|-environment|--env|-env|--e|-e)
            ENVIRONMENT="$2"
            shift
            shift
            ;;
        --service|-service|--svc|-svc|--s|-s)
            SERVICE="$2"
            shift
            shift
            ;;
        --tag|-tag|--t|-t)
            TAG="$2"
            shift
            shift
            ;;
        --port|-port|--p|-p)
            PORT="$2"
            shift
            shift
            ;;
        --help|-help|--h|-h)
            help
            exit 0
            ;;
        *)
            log "Input not understood. See \e[3m--help\e[0m for information on using this command."
            exit 1
            ;;
    esac
done

## NULL VALIDATION
if [ -z "$SERVICE" ]
then
    log "No \e[1mservice\e[0m inputted. Specifiy service with \e[3m--service\e[0m flag."
    exit 1
fi
if [ -z "$PORT" ]
then
    log "No \e[1mport\e[0m inputted. Specifiy port with \e[3m--port\e[0m flag."
    exit 1
fi

## DEFAULT VALIDATION
if [ -z "$ACTION" ]
then
    log "No \e[3m--action\e[0m inputted. Defaulting to \e[1mcreate\e[0m"
    ACTION="create"
fi
if [ -z "$ENVIRONMENT" ]
then
    log "No \e[3m--environment\e[0m inputted. Defaulting to \e[1mDev\e[0m"
    ENVIRONMENT="Dev"
fi
if [ -z "$TAG" ]
then
    log "No \e[3m--tag\e[0m inputted. Defaulting to \e[1m$ENVIRONMENT\e[0m"
    TAG="$ENVIRONMENT"
fi

## SERVICE PARSING
case $SERVICE in 
    frontend)
        cp $PROJECT_DIR/templates/cluster/services/frontend.yml ./service.yml
        SERVICE_NAME="${APPLICATION^}-${SERVICE^}-${SERVICE_STACK}-${ENVIRONMENT}"
        ;;
    backend)
        cp $PROJECT_DIR/templates/cluster/services/backend.yml ./service.yml
        SERVICE_NAME="${APPLICATION^}-${SERVICE^}-${SERVICE_STACK}-${ENVIRONMENT}"
        ;;
    sonar)
        cp $PROJECT_DIR/templates/cluster/services/sonar.yml ./service.yml
        ENVIRONMENT="Dev"
        SERVICE_NAME="${APPLICATION^}-${SERVICE^}-${SERVICE_STACK}"
        ;;
    *)
        log "\e3[m--service\e[0m input not understood; must be <frontend | backend>"
        exit 1
        ;;
esac

CERTIFICATE_ARN="arn:aws:acm:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:certificate/$CERTIFICATE_ID"
if [ "$ACTION" == "create" ]
then
    log "Creating \e[1m${SERVICE_NAME}\e[0m"
    aws cloudformation create-stack \
        --stack-name "${SERVICE_NAME}" \
        --template-body file://service.yml \
        --capabilities CAPABILITY_AUTO_EXPAND \
        --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=port,ParameterValue="$PORT" \
                        ParameterKey=tag,ParameterValue="$TAG" \
                        ParameterKey=domain,ParameterValue="$DOMAIN" \
                        ParameterKey=iamStack,ParameterValue="${APPLICATION^}-${IAM_STACK}" \
                        ParameterKey=repoStack,ParameterValue="${APPLICATION^}-${REPO_STACK}" \
                        ParameterKey=vpcStack,ParameterValue="${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}"

elif [ "$ACTION" == "update" ]
then
    log "Updating \e[1m${SERVICE_NAME}\e[0m"
    aws cloudformation update-stack \
        --stack-name "${SERVICE_NAME}" \
        --template-body file://service.yml \
        --capabilities CAPABILITY_AUTO_EXPAND \
        --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                        ParameterKey=applicationName,ParameterValue=$APPLICATION \
                        ParameterKey=port,ParameterValue="$PORT" \
                        ParameterKey=tag,ParameterValue="$TAG" \
                        ParameterKey=domain,ParameterValue="$DOMAIN" \
                        ParameterKey=iamStack,ParameterValue="${APPLICATION^}-${IAM_STACK}" \
                        ParameterKey=repoStack,ParameterValue="${APPLICATION^}-${REPO_STACK}" \
                        ParameterKey=vpcStack,ParameterValue="${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}"

elif [ "$ACTION" == "delete" ]
then
    log "Deleting \e[1m${SERVICE_NAME}\e[0m"
    aws cloudformation delete-stack \
        --stack-name "${SERVICE_NAME}"
else
    log "Action not understood"
    exit 1
fi

rm ./service.yml